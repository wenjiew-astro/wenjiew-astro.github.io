<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wenjie Wang</title>
  
  <subtitle>拾光的老人</subtitle>
  <link href="https://wenjiew-astro.github.io/atom.xml" rel="self"/>
  
  <link href="https://wenjiew-astro.github.io/"/>
  <updated>2025-09-05T03:15:04.042Z</updated>
  <id>https://wenjiew-astro.github.io/</id>
  
  <author>
    <name>Wenjie Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决 CDS FTP 下载数据时提示登录的问题</title>
    <link href="https://wenjiew-astro.github.io/2025/09/05/%E8%A7%A3%E5%86%B3%20CDS%20FTP%20%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE%E6%97%B6%E6%8F%90%E7%A4%BA%E7%99%BB%E5%BD%95%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://wenjiew-astro.github.io/2025/09/05/%E8%A7%A3%E5%86%B3%20CDS%20FTP%20%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE%E6%97%B6%E6%8F%90%E7%A4%BA%E7%99%BB%E5%BD%95%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2025-09-05T03:03:01.000Z</published>
    <updated>2025-09-05T03:15:04.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决-CDS-FTP-下载数据时提示登录的问题"><a href="#解决-CDS-FTP-下载数据时提示登录的问题" class="headerlink" title="解决 CDS FTP 下载数据时提示登录的问题"></a>解决 CDS FTP 下载数据时提示登录的问题</h1><p>在使用 <strong>CDS（Centre de Données astronomiques de Strasbourg）</strong> 下载天文数据时，有时会遇到这样一个情况：</p><p>当你点击类似的链接时：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdsarc.cds.unistra.fr/viz-bin/nph-Cat/txt?J/ApJ/928/172/fig6.dat</span><br></pre></td></tr></table></figure><img src="/2025/09/05/%E8%A7%A3%E5%86%B3%20CDS%20FTP%20%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE%E6%97%B6%E6%8F%90%E7%A4%BA%E7%99%BB%E5%BD%95%E7%9A%84%E9%97%AE%E9%A2%98/image-20250905110610852.png" class="" title="image-20250905110610852"><p>浏览器会弹出一个窗口，要求输入用户名和密码，看起来像是需要认证：</p><img src="/2025/09/05/%E8%A7%A3%E5%86%B3%20CDS%20FTP%20%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE%E6%97%B6%E6%8F%90%E7%A4%BA%E7%99%BB%E5%BD%95%E7%9A%84%E9%97%AE%E9%A2%98/image-20250905110818089.png" class="" title="image-20250905110818089"><p>这让人以为数据被加了权限，但其实  <strong>CDS 数据是公开的，不需要专门账号</strong> 。</p><hr><h2 id="一、问题原因"><a href="#一、问题原因" class="headerlink" title="一、问题原因"></a>一、问题原因</h2><ol><li><strong>现代浏览器已逐步废弃 FTP 协议支持</strong><ul><li>Chrome、Firefox、Edge 等新版浏览器默认关闭或限制了 FTP 支持。</li><li>浏览器会把 FTP 链接当成需要登录的资源，从而弹出用户名&#x2F;密码窗口。</li></ul></li><li><strong>FTP 的匿名访问机制</strong><ul><li>传统的 FTP 服务器允许“匿名登录”（Anonymous FTP）。</li><li>用户名必须填 <code>anonymous</code>，密码可以随便写（通常填邮箱地址），也可以直接留空。</li></ul></li></ol><p>因此，提示登录并不是因为 CDS 限制了数据，而是浏览器对 FTP 的处理方式导致的。</p><hr><h2 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h2><h3 id="方法一：使用匿名登录（推荐）"><a href="#方法一：使用匿名登录（推荐）" class="headerlink" title="方法一：使用匿名登录（推荐）"></a>方法一：使用匿名登录（推荐）</h3><p>在浏览器弹出的登录框中输入：</p><ul><li>用户名：<code>anonymous</code></li><li>密码：任意（推荐填常用邮箱地址，也可以留空）</li></ul><p>即可顺利进入并下载文件。</p><hr><h3 id="方法二：使用命令行工具"><a href="#方法二：使用命令行工具" class="headerlink" title="方法二：使用命令行工具"></a>方法二：使用命令行工具</h3><p>浏览器对 FTP 协议支持不佳，建议使用命令行工具来下载。</p><h4 id="Linux-macOS"><a href="#Linux-macOS" class="headerlink" title="Linux &#x2F; macOS"></a>Linux &#x2F; macOS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget ftp://cdsarc.u-strasbg.fr/pub/cats/J/ApJ/928/172/fig6.dat</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O ftp://cdsarc.u-strasbg.fr/pub/cats/J/ApJ/928/172/fig6.dat</span><br></pre></td></tr></table></figure><h4 id="Windows-PowerShell"><a href="#Windows-PowerShell" class="headerlink" title="Windows PowerShell"></a>Windows PowerShell</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> <span class="string">&quot;ftp://cdsarc.u-strasbg.fr/pub/cats/J/ApJ/928/172/fig6.dat&quot;</span> <span class="literal">-OutFile</span> <span class="string">&quot;fig6.dat&quot;</span></span><br></pre></td></tr></table></figure><p>这些工具会自动以匿名方式连接 FTP，无需额外输入。</p><hr><h3 id="方法三：通过-VizieR-ADS-入口（推荐）"><a href="#方法三：通过-VizieR-ADS-入口（推荐）" class="headerlink" title="方法三：通过 VizieR &#x2F; ADS 入口（推荐）"></a>方法三：通过 VizieR &#x2F; ADS 入口（推荐）</h3><p>如果仍无法访问 FTP，可以通过 VizieR 或 NASA ADS 的数据入口，找到对应期刊的数据集，点击网页提供的 <code>fig6.dat</code> 链接下载。</p><hr><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><ul><li><strong>现象</strong> ：打开 CDS 的 FTP 链接时浏览器提示需要输入用户名和密码。</li><li><strong>原因</strong> ：FTP 协议默认支持匿名访问，但现代浏览器已不再直接支持，因而触发登录框。</li><li><strong>解决方案</strong> ：</li><li>在浏览器中使用 <code>anonymous</code> 作为用户名，密码随便填。</li><li>更推荐使用 <code>wget</code>、<code>curl</code> 等命令行工具下载。</li><li>或通过 VizieR&#x2F;ADS 页面获取数据。</li></ul><p>这样就能顺利获取 CDS 的公开数据文件，比如 <code>fig6.dat</code>，无需真正的登录账号。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决-CDS-FTP-下载数据时提示登录的问题&quot;&gt;&lt;a href=&quot;#解决-CDS-FTP-下载数据时提示登录的问题&quot; class=&quot;headerlink&quot; title=&quot;解决 CDS FTP 下载数据时提示登录的问题&quot;&gt;&lt;/a&gt;解决 CDS FTP 下载数据时提</summary>
      
    
    
    
    <category term="科研" scheme="https://wenjiew-astro.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    <category term="工具" scheme="https://wenjiew-astro.github.io/categories/%E7%A7%91%E7%A0%94/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="笔记" scheme="https://wenjiew-astro.github.io/categories/%E7%A7%91%E7%A0%94/%E5%B7%A5%E5%85%B7/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="科研" scheme="https://wenjiew-astro.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
    <category term="笔记" scheme="https://wenjiew-astro.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo博文图片及与Typora一致</title>
    <link href="https://wenjiew-astro.github.io/2025/09/04/hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E5%8F%8A%E4%B8%8ETypora%E4%B8%80%E8%87%B4/"/>
    <id>https://wenjiew-astro.github.io/2025/09/04/hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E5%8F%8A%E4%B8%8ETypora%E4%B8%80%E8%87%B4/</id>
    <published>2025-09-04T01:41:52.000Z</published>
    <updated>2025-09-04T02:37:45.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博文图片及与Typora一致"><a href="#hexo博文图片及与Typora一致" class="headerlink" title="hexo博文图片及与Typora一致"></a>hexo博文图片及与Typora一致</h1><p>这篇记录如何让 <strong>Hexo 与 Typora 插入&#x2F;预览图片保持一致</strong>，并从旧的 <code>hexo-asset-image</code> 迁移到 <code>hexo-image-link</code>。目标是：<strong>Typora 本地能看，部署上线也能看</strong>，而且不用写 <code>&#123;% asset_img %&#125;</code> 这样的标签。</p><h2 id="1-卸载-hexo-asset-image"><a href="#1-卸载-hexo-asset-image" class="headerlink" title="1. 卸载 hexo-asset-image"></a>1. 卸载 <code>hexo-asset-image</code></h2><p>这个老插件在新版 Hexo 下容易与资源文件夹机制冲突，建议移除：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>卸载后，检查 <code>package.json</code>，若还有残留条目，手工删掉并执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="2-安装-hexo-image-link"><a href="#2-安装-hexo-image-link" class="headerlink" title="2. 安装 hexo-image-link"></a>2. 安装 <code>hexo-image-link</code></h2><p>用来自动把 Markdown 里的图片链接解析成正确路径：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-image-link --save</span><br></pre></td></tr></table></figure><p>无需在文章里写 <code>&#123;% asset_img %&#125;</code>，保持纯 Markdown 即可。</p><h2 id="3-启用文章资源文件夹（配合-Typora-最稳）"><a href="#3-启用文章资源文件夹（配合-Typora-最稳）" class="headerlink" title="3. 启用文章资源文件夹（配合 Typora 最稳）"></a>3. 启用文章资源文件夹（配合 Typora 最稳）</h2><p>编辑站点根目录的 <code>_config.yml</code>（不是主题配置）：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>建议同时保持 Hexo 的默认渲染器（如 <code>hexo-renderer-marked</code>），避免与路径改写类插件冲突。</p><h2 id="4-推荐的文件与引用方式"><a href="#4-推荐的文件与引用方式" class="headerlink" title="4. 推荐的文件与引用方式"></a>4. 推荐的文件与引用方式</h2><p>假设你的文章是 <strong><code>hexo博文图片及与Typora一致.md</code></strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source/_posts/</span><br><span class="line">  hexo博文图片及与Typora一致.md</span><br><span class="line">  hexo博文图片及与Typora一致/</span><br><span class="line">    image-1.png</span><br><span class="line">    keyboard-shortcuts-win.png</span><br><span class="line">    keyboard-shortcuts-macos.png</span><br><span class="line">    keyboard-shortcuts-linux.png</span><br></pre></td></tr></table></figure><p>在 Markdown 中使用<strong>纯相对路径</strong>（Typora 与 Hexo 都能识别）：</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![](<span class="link">./image-1.png</span>)</span><br><span class="line">![](<span class="link">./keyboard-shortcuts-win.png</span>)</span><br><span class="line">![](<span class="link">./keyboard-shortcuts-macos.png</span>)</span><br><span class="line">![](<span class="link">./keyboard-shortcuts-linux.png</span>)</span><br></pre></td></tr></table></figure><blockquote><p>只要图片放在<strong>文章同名文件夹</strong>里，并用 <code>./文件名</code> 这种写法，就能在 Typora 本地预览 + Hexo 生成后正常访问。</p></blockquote><h2 id="5-Typora-设置建议"><a href="#5-Typora-设置建议" class="headerlink" title="5. Typora 设置建议"></a>5. Typora 设置建议</h2><ul><li><p>偏好设置 → <strong>图像</strong>：</p><ul><li>「插入图片时复制到」：<code>./$&#123;filename&#125;/</code></li><li>勾选「<strong>使用相对路径</strong>」</li></ul></li><li><p>这样粘贴图片时会自动进入文章同名文件夹，并写成 <code>./xxx.png</code>。</p><img src="/2025/09/04/hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E5%8F%8A%E4%B8%8ETypora%E4%B8%80%E8%87%B4/image-20250904101717612.png" class="" title="image-20250904101717612"></li></ul><h2 id="6-生成与验证"><a href="#6-生成与验证" class="headerlink" title="6. 生成与验证"></a>6. 生成与验证</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>浏览器打开 <code>http://localhost:4000</code> 检查图片显示是否正常。</p><h2 id="7-常见问题排查"><a href="#7-常见问题排查" class="headerlink" title="7. 常见问题排查"></a>7. 常见问题排查</h2><ol><li><strong>首页&#x2F;归档页不显示但文章页能显示</strong></li></ol><ul><li>多半是装了会改写 <code>&lt;img src&gt;</code> 的插件（懒加载、路径清洗等）。请逐个禁用后再测试。</li><li>与本方案冲突较多的老插件：<code>hexo-asset-image</code>（已卸）、某些 lazyload&#x2F;shortcode 过滤器等。</li></ul><ol><li><strong>部署后 404 &#x2F; 路径错位</strong></li></ol><ul><li>检查站点 <code>_config.yml</code> 的 <code>url</code>&#x2F;<code>root</code> 与部署的路径一致：<ul><li>用户主页：<code>root: /</code></li><li>项目页：<code>root: /你的仓库名/</code></li></ul></li><li>确认图片确实位于 <code>source/_posts/文章同名文件夹/</code> 内。</li></ul><ol><li><strong>Typora 里路径被写成 <code>文章名/图片.png</code></strong></li></ol><ul><li>把链接改成 <code>./图片.png</code>（相对路径）；</li><li>确保 Typora 的「路径前缀模板」留空，开启「使用相对路径」。</li></ul><h2 id="8-小结"><a href="#8-小结" class="headerlink" title="8. 小结"></a>8. 小结</h2><ul><li><strong>卸载</strong> <code>hexo-asset-image</code>，<strong>安装</strong> <code>hexo-image-link</code>。</li><li>开启 <code>post_asset_folder: true</code>，图片放入<strong>文章同名文件夹</strong>。</li><li>文章里用<strong>纯 Markdown 相对路径</strong>（<code>./xxx.png</code>）。</li><li>避免再用 <code>&#123;% asset_img %&#125;</code>，保证 Typora 与 Hexo 一致预览。</li></ul><p>完成以上配置后，写作体验就能「所见即所得」，部署也不再踩坑。祝写博愉快～ 🎉</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::contentReference[oaicite:0]&#123;index=0&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo博文图片及与Typora一致&quot;&gt;&lt;a href=&quot;#hexo博文图片及与Typora一致&quot; class=&quot;headerlink&quot; title=&quot;hexo博文图片及与Typora一致&quot;&gt;&lt;/a&gt;hexo博文图片及与Typora一致&lt;/h1&gt;&lt;p&gt;这篇记录如何</summary>
      
    
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    <category term="Typora" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/Hexo/Typora/"/>
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/tags/Hexo/"/>
    
    <category term="Typora" scheme="https://wenjiew-astro.github.io/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 快速折叠所有的文件夹</title>
    <link href="https://wenjiew-astro.github.io/2025/09/03/VSCode%20%E5%BF%AB%E9%80%9F%E6%8A%98%E5%8F%A0%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>https://wenjiew-astro.github.io/2025/09/03/VSCode%20%E5%BF%AB%E9%80%9F%E6%8A%98%E5%8F%A0%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2025-09-02T16:00:00.000Z</published>
    <updated>2025-09-04T02:16:51.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VSCode-快速折叠所有的文件夹"><a href="#VSCode-快速折叠所有的文件夹" class="headerlink" title="VSCode 快速折叠所有的文件夹"></a>VSCode 快速折叠所有的文件夹</h1><p><strong>遇到的问题</strong><br>在写代码的时候，会打开很多文件夹，但是开的文件夹很多的话又很烦，所以想折叠所有文件夹</p><blockquote><p>我在网上也找过快捷键，但是网上的 <code>ctrl + k  ctrl + 0</code> 折叠，<code>ctrl + k  ctrl + j</code> 展开并没有作用。</p></blockquote><p><strong>找到的另一个解决方案</strong><br><code>看红色的箭头，点击这个会快速折叠所有文件夹！</code></p><img src="/2025/09/03/VSCode%20%E5%BF%AB%E9%80%9F%E6%8A%98%E5%8F%A0%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/image.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VSCode-快速折叠所有的文件夹&quot;&gt;&lt;a href=&quot;#VSCode-快速折叠所有的文件夹&quot; class=&quot;headerlink&quot; title=&quot;VSCode 快速折叠所有的文件夹&quot;&gt;&lt;/a&gt;VSCode 快速折叠所有的文件夹&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;遇到</summary>
      
    
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="VSCode" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/VSCode/"/>
    
    
    <category term="VSCode" scheme="https://wenjiew-astro.github.io/tags/VSCode/"/>
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 快捷键大全</title>
    <link href="https://wenjiew-astro.github.io/2025/09/03/VSCode%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
    <id>https://wenjiew-astro.github.io/2025/09/03/VSCode%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</id>
    <published>2025-09-02T16:00:00.000Z</published>
    <updated>2025-09-04T01:39:16.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VSCode-快捷键大全"><a href="#VSCode-快捷键大全" class="headerlink" title="VSCode 快捷键大全"></a>VSCode 快捷键大全</h1><blockquote><p>转载一篇来自菜鸟教程的文章，方便自查：<a href="https://www.runoob.com/vscode/vscode-shortcut-keys.html">VSCode 快捷键大全 | 菜鸟教程</a></p></blockquote><p>本章节是 <strong>Visual Studio Code (VS Code)</strong> 的常用快捷键大全，涵盖代码编辑、文件管理、调试等操作，便于提高开发效率。</p><p>快捷键的设置可以通过菜单栏的 <strong>Code &gt; 首选项 &gt; 键盘快捷方式</strong> 查看：</p><p><img src="/2025/09/03/VSCode%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/5d1419da-2f35-45b1-ab65-9a036b044b61.png" alt="img"></p><p>通过快捷键编辑器，您可以根据自己的需求定制键盘快捷键，提升开发效率。</p><p>说明：</p><ol><li><strong>macOS</strong> 的 <code>Cmd</code> 键对应 Windows&#x2F;Linux 的 <code>Ctrl</code> 键。</li><li><strong>macOS</strong> 的 <code>Option</code> 键对应 Windows&#x2F;Linux 的 <code>Alt</code> 键。</li><li>部分快捷键可能因系统或配置不同而有所差异。</li></ol><hr><h3 id="1-通用操作快捷键"><a href="#1-通用操作快捷键" class="headerlink" title="1. 通用操作快捷键"></a>1. <strong>通用操作快捷键</strong></h3><table><thead><tr><th align="left">功能</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">打开命令面板</td><td align="left"><code>Ctrl + Shift + P</code></td><td align="left"><code>Cmd + Shift + P</code></td></tr><tr><td align="left">打开设置</td><td align="left"><code>Ctrl + ,</code></td><td align="left"><code>Cmd + ,</code></td></tr><tr><td align="left">打开终端</td><td align="left"><code> Ctrl + &#39;</code></td><td align="left"><code> Ctrl + &#39;</code></td></tr><tr><td align="left">新建窗口</td><td align="left"><code>Ctrl + Shift + N</code></td><td align="left"><code>Cmd + Shift + N</code></td></tr><tr><td align="left">关闭窗口</td><td align="left"><code>Ctrl + Shift + W</code></td><td align="left"><code>Cmd + Shift + W</code></td></tr><tr><td align="left">保存文件</td><td align="left"><code>Ctrl + S</code></td><td align="left"><code>Cmd + S</code></td></tr><tr><td align="left">全部保存</td><td align="left"><code>Ctrl + K S</code></td><td align="left"><code>Cmd + Option + S</code></td></tr><tr><td align="left">自动保存切换</td><td align="left"><code>Ctrl + Shift + P</code> 后搜索 <strong>Auto Save</strong></td><td align="left">同左</td></tr><tr><td align="left">快速打开，转到文件</td><td align="left"><code>Ctrl + P</code></td><td align="left"><code>Cmd + P</code></td></tr><tr><td align="left">键盘快捷键设置</td><td align="left"><code>Ctrl + K, Ctrl + S</code></td><td align="left"><code>Cmd + K, Cmd + S</code></td></tr></tbody></table><hr><h3 id="2-文件与编辑器操作"><a href="#2-文件与编辑器操作" class="headerlink" title="2. 文件与编辑器操作"></a>2. <strong>文件与编辑器操作</strong></h3><table><thead><tr><th align="left">功能</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">新建文件</td><td align="left"><code>Ctrl + N</code></td><td align="left"><code>Cmd + N</code></td></tr><tr><td align="left">打开文件</td><td align="left"><code>Ctrl + O</code></td><td align="left"><code>Cmd + O</code></td></tr><tr><td align="left">保存文件</td><td align="left"><code>Ctrl + S</code></td><td align="left"><code>Cmd + S</code></td></tr><tr><td align="left">另存为</td><td align="left"><code>Ctrl + Shift + S</code></td><td align="left"><code>Cmd + Shift + S</code></td></tr><tr><td align="left">关闭文件</td><td align="left"><code>Ctrl + W</code></td><td align="left"><code>Cmd + W</code></td></tr><tr><td align="left">关闭所有文件</td><td align="left"><code>Ctrl + K, Ctrl + W</code></td><td align="left"><code>Cmd + K, Cmd + W</code></td></tr><tr><td align="left">重新打开关闭的文件</td><td align="left"><code>Ctrl + Shift + T</code></td><td align="left"><code>Cmd + Shift + T</code></td></tr><tr><td align="left">打开文件夹</td><td align="left"><code>Ctrl+K O</code></td><td align="left"><code>Cmd+K O</code></td></tr><tr><td align="left">上一个文件</td><td align="left"><code>Ctrl+Tab</code></td><td align="left"><code>Cmd+Tab</code></td></tr><tr><td align="left">下一个文件</td><td align="left"><code>Ctrl+Shift+Tab</code></td><td align="left"><code>Cmd+Shift+Tab</code></td></tr><tr><td align="left">切换编辑器布局</td><td align="left"><code>Alt+Shift+数字</code></td><td align="left"><code>Cmd+Option+数字</code></td></tr><tr><td align="left">全屏切换</td><td align="left"><code>F11</code></td><td align="left"><code>Ctrl+Cmd+F</code></td></tr></tbody></table><hr><h3 id="3-代码编辑快捷键"><a href="#3-代码编辑快捷键" class="headerlink" title="3. 代码编辑快捷键"></a>3. <strong>代码编辑快捷键</strong></h3><table><thead><tr><th align="left">功能</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">撤销</td><td align="left"><code>Ctrl + Z</code></td><td align="left"><code>Cmd + Z</code></td></tr><tr><td align="left">重做</td><td align="left"><code>Ctrl + Y</code></td><td align="left"><code>Cmd + Y</code></td></tr><tr><td align="left">复制</td><td align="left"><code>Ctrl + C</code></td><td align="left"><code>Cmd + C</code></td></tr><tr><td align="left">剪切</td><td align="left"><code>Ctrl + X</code></td><td align="left"><code>Cmd + X</code></td></tr><tr><td align="left">粘贴</td><td align="left"><code>Ctrl + V</code></td><td align="left"><code>Cmd + V</code></td></tr><tr><td align="left">查找</td><td align="left"><code>Ctrl + F</code></td><td align="left"><code>Cmd + F</code></td></tr><tr><td align="left">替换</td><td align="left"><code>Ctrl + H</code></td><td align="left"><code>Cmd + H</code></td></tr><tr><td align="left">全选</td><td align="left"><code>Ctrl + A</code></td><td align="left"><code>Cmd + A</code></td></tr><tr><td align="left">格式化代码</td><td align="left"><code>Shift + Alt + F</code></td><td align="left"><code>Shift + Option + F</code></td></tr><tr><td align="left">注释行</td><td align="left"><code>Ctrl + /</code></td><td align="left"><code>Cmd + /</code></td></tr><tr><td align="left">多行注释</td><td align="left"><code>Shift + Alt + A</code></td><td align="left"><code>Shift + Option + A</code></td></tr><tr><td align="left">复制当前行</td><td align="left"><code>Alt + Shift + Down</code></td><td align="left"><code>Option + Shift + Down</code></td></tr><tr><td align="left">删除当前行</td><td align="left"><code>Ctrl + Shift + K</code></td><td align="left"><code>Cmd + Shift + K</code></td></tr><tr><td align="left">移动当前行</td><td align="left"><code>Alt + Up/Down</code></td><td align="left"><code>Option + Up/Down</code></td></tr><tr><td align="left">选中当前行</td><td align="left"><code>Ctrl + L</code></td><td align="left"><code>Cmd + L</code></td></tr><tr><td align="left">查找替换</td><td align="left"><code>Ctrl + H</code></td><td align="left"><code>Cmd + Option + F</code></td></tr><tr><td align="left">转到行号</td><td align="left"><code>Ctrl + G</code></td><td align="left"><code>Cmd + G</code></td></tr><tr><td align="left">在下方插入行</td><td align="left"><code>Ctrl + Enter</code></td><td align="left"><code>Cmd + Enter</code></td></tr><tr><td align="left">在上方插入行</td><td align="left"><code>Ctrl + Shift + Enter</code></td><td align="left"><code>Cmd + Shift + Enter</code></td></tr><tr><td align="left">跳转到匹配的括号</td><td align="left"><code>Ctrl + Shift + \</code></td><td align="left"><code>Cmd + Shift + \</code></td></tr><tr><td align="left">缩进&#x2F;取消缩进</td><td align="left"><code>Ctrl + ] / [</code></td><td align="left"><code>Cmd + ] / [</code></td></tr><tr><td align="left">转到行首&#x2F;行尾</td><td align="left"><code>Home / End</code></td><td align="left"><code>Cmd + ← / →</code></td></tr><tr><td align="left">转到文件开头&#x2F;结尾</td><td align="left"><code>Ctrl + Home / End</code></td><td align="left"><code>Cmd + ↑ / ↓</code></td></tr><tr><td align="left">折叠&#x2F;展开区域</td><td align="left"><code>Ctrl + Shift + [ / ]</code></td><td align="left"><code>Option + Cmd + [ / ]</code></td></tr><tr><td align="left">切换块注释</td><td align="left"><code>Shift + Alt + A</code></td><td align="left"><code>Option + Shift + A</code></td></tr><tr><td align="left">切换自动换行</td><td align="left"><code>Alt + Z</code></td><td align="left"><code>Option + Z</code></td></tr></tbody></table><hr><h3 id="4-多光标操作"><a href="#4-多光标操作" class="headerlink" title="4. 多光标操作"></a>4. <strong>多光标操作</strong></h3><table><thead><tr><th align="left">功能</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">插入光标</td><td align="left"><code>Alt + 点击</code></td><td align="left"><code>Option + 点击</code></td></tr><tr><td align="left">在上方&#x2F;下方插入光标</td><td align="left"><code>Ctrl + Alt + ↑ / ↓</code></td><td align="left"><code>Option + Cmd + ↑ / ↓</code></td></tr><tr><td align="left">撤销上一个光标操作</td><td align="left"><code>Ctrl + U</code></td><td align="left"><code>Cmd + U</code></td></tr><tr><td align="left">选择当前行</td><td align="left"><code>Ctrl + L</code></td><td align="left"><code>Cmd + L</code></td></tr><tr><td align="left">选择所有匹配项</td><td align="left"><code>Ctrl + F2</code></td><td align="left"><code>Cmd + F2</code></td></tr><tr><td align="left">列选择</td><td align="left"><code>Shift + Alt + 拖动</code></td><td align="left"><code>Shift + Option + 拖动</code></td></tr><tr><td align="left">选中所有匹配内容</td><td align="left"><code>Ctrl + Shift + L</code></td><td align="left"><code>Cmd + Shift + L</code></td></tr><tr><td align="left">选中下一个匹配</td><td align="left"><code>Ctrl + D</code></td><td align="left"><code>Cmd + D</code></td></tr></tbody></table><hr><h3 id="5-调试快捷键"><a href="#5-调试快捷键" class="headerlink" title="5. 调试快捷键"></a>5. <strong>调试快捷键</strong></h3><table><thead><tr><th align="left">功能</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">开始调试</td><td align="left"><code>F5</code></td><td align="left"><code>F5</code></td></tr><tr><td align="left">停止调试</td><td align="left"><code>Shift+F5</code></td><td align="left"><code>Shift+F5</code></td></tr><tr><td align="left">步过</td><td align="left"><code>F10</code></td><td align="left"><code>F10</code></td></tr><tr><td align="left">步入</td><td align="left"><code>F11</code></td><td align="left"><code>F11</code></td></tr><tr><td align="left">步出</td><td align="left"><code>Shift+F11</code></td><td align="left"><code>Shift+F11</code></td></tr><tr><td align="left">切换断点</td><td align="left"><code>F9</code></td><td align="left"><code>F9</code></td></tr></tbody></table><hr><h3 id="6-搜索和导航"><a href="#6-搜索和导航" class="headerlink" title="6. 搜索和导航"></a>6. <strong>搜索和导航</strong></h3><table><thead><tr><th align="left">功能</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">全局搜索</td><td align="left"><code>Ctrl+Shift+F</code></td><td align="left"><code>Cmd+Shift+F</code></td></tr><tr><td align="left">转到定义</td><td align="left"><code>F12</code></td><td align="left"><code>F12</code></td></tr><tr><td align="left">转到声明</td><td align="left"><code>Ctrl+F12</code></td><td align="left"><code>Cmd+F12</code></td></tr><tr><td align="left">查找引用</td><td align="left"><code>Shift+F12</code></td><td align="left"><code>Shift+F12</code></td></tr><tr><td align="left">显示大纲</td><td align="left"><code>Ctrl+Shift+O</code></td><td align="left"><code>Cmd+Shift+O</code></td></tr><tr><td align="left">跳转到上一个位置</td><td align="left"><code>Ctrl+Alt+Left</code></td><td align="left"><code>Cmd+Option+Left</code></td></tr><tr><td align="left">跳转到下一个位置</td><td align="left"><code>Ctrl+Alt+Right</code></td><td align="left"><code>Cmd+Option+Right</code></td></tr></tbody></table><hr><h3 id="7-版本控制"><a href="#7-版本控制" class="headerlink" title="7. 版本控制"></a>7. <strong>版本控制</strong></h3><table><thead><tr><th align="left">功能</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">打开版本控制视图</td><td align="left"><code>Ctrl+Shift+G</code></td><td align="left"><code>Cmd+Shift+G</code></td></tr><tr><td align="left">提交代码</td><td align="left"><code>Ctrl+Enter</code></td><td align="left"><code>Cmd+Enter</code></td></tr><tr><td align="left">查看变更</td><td align="left"><code>Ctrl+Shift+D</code></td><td align="left"><code>Cmd+Shift+D</code></td></tr></tbody></table><hr><h3 id="8-终端操作"><a href="#8-终端操作" class="headerlink" title="8. 终端操作"></a>8. <strong>终端操作</strong></h3><table><thead><tr><th align="left">功能</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">显示集成终端</td><td align="left">Ctrl + &#96;</td><td align="left">Ctrl + &#96;</td></tr><tr><td align="left">新建终端</td><td align="left">&#96;Ctrl+Shift+&#96;&#96;&#96;</td><td align="left">&#96;Cmd+Shift+&#96;&#96;&#96;</td></tr><tr><td align="left">切换终端</td><td align="left"><code>Ctrl+PageUp/PageDown</code></td><td align="left"><code>Cmd+PageUp/PageDown</code></td></tr><tr><td align="left">关闭终端</td><td align="left"><code>Ctrl+Shift+W</code></td><td align="left"><code>Cmd+Shift+W</code></td></tr></tbody></table><h3 id="9-命令面板"><a href="#9-命令面板" class="headerlink" title="9. 命令面板"></a>9. 命令面板</h3><table><thead><tr><th align="left">操作</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">打开命令面板</td><td align="left"><code>Ctrl + Shift + P</code></td><td align="left"><code>Cmd + Shift + P</code></td></tr><tr><td align="left">打开键盘快捷键参考</td><td align="left"><code>Ctrl + K, Ctrl + S</code></td><td align="left"><code>Cmd + K, Cmd + S</code></td></tr></tbody></table><h3 id="10-显示"><a href="#10-显示" class="headerlink" title="10. 显示"></a>10. 显示</h3><table><thead><tr><th align="left"><strong>功能</strong></th><th align="left"><strong>Windows&#x2F;Linux</strong></th><th align="left"><strong>macOS</strong></th></tr></thead><tbody><tr><td align="left">切换全屏</td><td align="left"><code>F11</code></td><td align="left"><code>Cmd + Ctrl + F</code></td></tr><tr><td align="left">放大&#x2F;缩小</td><td align="left"><code>Ctrl + = / -</code></td><td align="left"><code>Cmd + = / -</code></td></tr><tr><td align="left">切换侧边栏可见性</td><td align="left"><code>Ctrl + B</code></td><td align="left"><code>Cmd + B</code></td></tr><tr><td align="left">显示资源管理器</td><td align="left"><code>Ctrl + Shift + E</code></td><td align="left"><code>Cmd + Shift + E</code></td></tr><tr><td align="left">显示搜索</td><td align="left"><code>Ctrl + Shift + F</code></td><td align="left"><code>Cmd + Shift + F</code></td></tr><tr><td align="left">显示源代码控制</td><td align="left"><code>Ctrl + Shift + G</code></td><td align="left"><code>Cmd + Shift + G</code></td></tr><tr><td align="left">显示调试</td><td align="left"><code>Ctrl + Shift + D</code></td><td align="left"><code>Cmd + Shift + D</code></td></tr><tr><td align="left">显示扩展</td><td align="left"><code>Ctrl + Shift + X</code></td><td align="left"><code>Cmd + Shift + X</code></td></tr></tbody></table><h3 id="11-扩展操作"><a href="#11-扩展操作" class="headerlink" title="11. 扩展操作"></a>11. 扩展操作</h3><table><thead><tr><th align="left">操作</th><th align="left">Windows&#x2F;Linux</th><th align="left">macOS</th></tr></thead><tbody><tr><td align="left">安装扩展</td><td align="left"><code>Ctrl + Shift + X</code></td><td align="left"><code>Cmd + Shift + X</code></td></tr><tr><td align="left">扩展管理</td><td align="left"><code>Ctrl + Shift + P</code> → 输入 “Extensions”</td><td align="left">同左</td></tr></tbody></table><h3 id="12-其他"><a href="#12-其他" class="headerlink" title="12. 其他"></a>12. 其他</h3><table><thead><tr><th align="left"><strong>功能</strong></th><th align="left"><strong>Windows&#x2F;Linux</strong></th><th align="left"><strong>macOS</strong></th></tr></thead><tbody><tr><td align="left">打开 Markdown 预览</td><td align="left"><code>Ctrl + K, V</code></td><td align="left"><code>Cmd + K, V</code></td></tr><tr><td align="left">禅模式</td><td align="left"><code>Ctrl + K, Z</code></td><td align="left"><code>Cmd + K, Z</code></td></tr></tbody></table><hr><h2 id="官方提供的快捷键说明"><a href="#官方提供的快捷键说明" class="headerlink" title="官方提供的快捷键说明"></a>官方提供的快捷键说明</h2><h3 id="Windows-平台"><a href="#Windows-平台" class="headerlink" title="Windows 平台"></a>Windows 平台</h3><p><img src="/2025/09/03/VSCode%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/keyboard-shortcuts-win.png" alt="img"></p><h3 id="macOS-平台"><a href="#macOS-平台" class="headerlink" title="macOS 平台"></a>macOS 平台</h3><p><img src="/2025/09/03/VSCode%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/keyboard-shortcuts-macos.png" alt="img"></p><h3 id="Linux-平台"><a href="#Linux-平台" class="headerlink" title="Linux 平台"></a>Linux 平台</h3><p><img src="/2025/09/03/VSCode%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/keyboard-shortcuts-linux.png" alt="img"></p><hr><p>以上快捷键可以通过 <strong>键绑定设置</strong> 自定义。在 VS Code 中，按下 <code>Ctrl+K Ctrl+S</code>（macOS 上 <code>Cmd+K Cmd+S</code>）打开键绑定页面，方便查询和修改快捷键。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VSCode-快捷键大全&quot;&gt;&lt;a href=&quot;#VSCode-快捷键大全&quot; class=&quot;headerlink&quot; title=&quot;VSCode 快捷键大全&quot;&gt;&lt;/a&gt;VSCode 快捷键大全&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;转载一篇来自菜鸟教程的文章，方便自</summary>
      
    
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="VSCode" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/VSCode/"/>
    
    
    <category term="VSCode" scheme="https://wenjiew-astro.github.io/tags/VSCode/"/>
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置安知鱼音乐页面</title>
    <link href="https://wenjiew-astro.github.io/2025/09/01/hexo%E9%85%8D%E7%BD%AE%E5%AE%89%E7%9F%A5%E9%B1%BC%E9%9F%B3%E4%B9%90%E9%A1%B5%E9%9D%A2/"/>
    <id>https://wenjiew-astro.github.io/2025/09/01/hexo%E9%85%8D%E7%BD%AE%E5%AE%89%E7%9F%A5%E9%B1%BC%E9%9F%B3%E4%B9%90%E9%A1%B5%E9%9D%A2/</id>
    <published>2025-08-31T16:00:00.000Z</published>
    <updated>2025-09-01T13:41:41.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo配置安知鱼音乐页面"><a href="#hexo配置安知鱼音乐页面" class="headerlink" title="hexo配置安知鱼音乐页面"></a>hexo配置安知鱼音乐页面</h1><p>用现成的 <code>hexo-anzhiyu-music</code> 适配脚本，样式、布局。</p><p><strong>1）安装脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在博客根目录执行</span><br><span class="line"></span><br><span class="line">npm i hexo-anzhiyu-music --save</span><br></pre></td></tr></table></figure><p> <strong>2）在站点配置或主题配置里加上：</strong></p><p> （任选其一：<code>_config.yml</code> 或 <code>_config.butterfly.yml</code>）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 音乐馆</span><br><span class="line">anzhiyu_music:</span><br><span class="line">  enable: true</span><br><span class="line">  id: &quot;826250135&quot;    # 你的网易云歌单ID</span><br><span class="line">  server: netease</span><br><span class="line">  customJS:</span><br><span class="line">  customCSS:</span><br><span class="line">  front_matter: |</span><br><span class="line">    title: 音乐馆</span><br><span class="line">    type: music</span><br><span class="line">    aplayer: true</span><br><span class="line">    top_img: false</span><br><span class="line">    comments: false</span><br><span class="line">    aside: false</span><br></pre></td></tr></table></figure><p> <strong>3）用 Butterfly 的 <code>inject</code> 注入 APlayer 和 Meting2（关键）</strong></p><p>打开 <code>themes/butterfly/_config.yml</code>，增加（或合并到你自己的 inject）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.cbd.int/anzhiyu-theme-static@1.0.0/aplayer/APlayer.min.css&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;script src=&quot;https://cdn.cbd.int/anzhiyu-blog-static@1.0.1/js/APlayer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;script src=&quot;https://npm.elemecdn.com/hexo-anzhiyu-music@1.0.1/assets/js/Meting2.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 备用镜像（万一被墙&#x2F;抽风）：</p><ul><li><code>https://cdn.jsdelivr.net/npm/hexo-anzhiyu-music@1.0.1/assets/js/Meting2.min.js</code></li><li><code>https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js</code></li><li><code>https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css</code></li></ul></blockquote><p> <strong>4）新建页面（如果还没建）：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page music</span><br></pre></td></tr></table></figure><p>把 <code>source/music/index.md</code> 写成如下这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 音乐馆</span><br><span class="line">type: music</span><br><span class="line">comments: false</span><br><span class="line">aside: false</span><br><span class="line">aplayer: true</span><br><span class="line">top_img: false</span><br><span class="line"># 如果你开了 pjax，强烈建议关掉，否则可能不执行初始化</span><br><span class="line">pjax: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;meting-js</span><br><span class="line">  server=&quot;netease&quot;</span><br><span class="line">  type=&quot;playlist&quot;</span><br><span class="line">  id=&quot;826250135&quot;</span><br><span class="line">  fixed=&quot;false&quot;</span><br><span class="line">  autoplay=&quot;false&quot;</span><br><span class="line">  order=&quot;list&quot;</span><br><span class="line">  list-folded=&quot;false&quot;</span><br><span class="line">  lrc-type=&quot;1&quot;&gt;</span><br><span class="line">&lt;/meting-js&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 然后：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><strong>5）问题：发现这样进度条有点高，可以使用下面这样的方案解决</strong></p><p>在 <code>themes/butterfly/_config.yml</code> 里，把之前我让你加的 <code>&lt;style id=&quot;music-fix&quot;&gt;...&lt;/style&gt;</code> 删除；然后在 <code>inject.head</code> 里加入这段极简样式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">head:</span><br><span class="line">    - &lt;style id=&quot;music-bar-lower&quot;&gt;</span><br><span class="line">        /* 仅把控制条整体往下挪一点 */</span><br><span class="line">        .aplayer .aplayer-controller&#123;</span><br><span class="line">          transform: translateY(12px);   /* 数值越大越靠下，自己调 */</span><br><span class="line">        &#125;</span><br><span class="line">        /* 防止被裁切/挡住，给信息区留一点底部空间 */</span><br><span class="line">        .aplayer .aplayer-info&#123;</span><br><span class="line">          padding-bottom: 12px;</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>想再低一点，就把 <code>12px</code> 调成 <code>16px / 20px</code> 试试；不影响歌词样式，也不会改进度条的粗细。</p><blockquote><p><strong>但是还有一个遗留问题，歌词滚动不正常，暂时没有更好的解决方案，就先这样吧，之后有时间再解决一下！！</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo配置安知鱼音乐页面&quot;&gt;&lt;a href=&quot;#hexo配置安知鱼音乐页面&quot; class=&quot;headerlink&quot; title=&quot;hexo配置安知鱼音乐页面&quot;&gt;&lt;/a&gt;hexo配置安知鱼音乐页面&lt;/h1&gt;&lt;p&gt;用现成的 &lt;code&gt;hexo-anzhiyu-mu</summary>
      
    
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置友链</title>
    <link href="https://wenjiew-astro.github.io/2025/09/01/hexo%E9%85%8D%E7%BD%AE%E5%8F%8B%E9%93%BE/"/>
    <id>https://wenjiew-astro.github.io/2025/09/01/hexo%E9%85%8D%E7%BD%AE%E5%8F%8B%E9%93%BE/</id>
    <published>2025-08-31T16:00:00.000Z</published>
    <updated>2025-09-01T06:28:26.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 效果图可以查看我的博客<code>友人帐</code>页面</p></blockquote><h2 id="数据-（统一写-JSON，和-Matery-同款字段，后续可迁移很方便）"><a href="#数据-（统一写-JSON，和-Matery-同款字段，后续可迁移很方便）" class="headerlink" title="数据 （统一写 JSON，和 Matery 同款字段，后续可迁移很方便）"></a><strong>数据</strong> （统一写 JSON，和 Matery 同款字段，后续可迁移很方便）</h2><p>新建 <code>source/_data/friends.json</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;avatar&quot;: &quot;https://files.catbox.moe/zepnb3.jpg&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;爱骑扫把的王同学&quot;,</span><br><span class="line">        &quot;introduction&quot;: &quot;海是倒过来的天&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;https://wenjiew-astro.github.io/&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;我的地盘&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;avatar&quot;: &quot;https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;Hexo&quot;,</span><br><span class="line">        &quot;introduction&quot;: &quot;快速、简单且强大的网站框架&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;https://hexo.io/zh-tw/&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;访问官网&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;avatar&quot;: &quot;https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;安知鱼&quot;,</span><br><span class="line">        &quot;introduction&quot;: &quot;生活明朗，万物可爱&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;https://blog.anheyu.com/&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;快去戳他&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;Kezade&quot;,</span><br><span class="line">        &quot;avatar&quot;: &quot;https://zyxelva.github.io/medias/avatar.png&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;https://zyxelva.github.io&quot;,</span><br><span class="line">        &quot;introduction&quot;: &quot;全栈开发，架构师，向往躺平&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;访问他的主页&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模板（Pug）"><a href="#模板（Pug）" class="headerlink" title="模板（Pug）"></a><strong>模板（Pug）</strong></h2><p> 在 <code>themes/butterfly/layout/ 新建 </code>  <strong>friends-matery.pug</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- themes/butterfly/layout/friends-matery.pug</span><br><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  .page#page</span><br><span class="line">    // 顶部标题</span><br><span class="line">    if page.title</span><br><span class="line">      .friends-hero</span><br><span class="line">        h1= page.title</span><br><span class="line"></span><br><span class="line">    // 友链卡片</span><br><span class="line">    .friends-grid(class=page.gradient ? &#x27;gradient&#x27; : &#x27;&#x27;)</span><br><span class="line">      - const list = site.data.friends || []</span><br><span class="line">      each f in list</span><br><span class="line">        article.friend-card</span><br><span class="line">          img.avatar(</span><br><span class="line">            src=f.avatar,</span><br><span class="line">            alt=f.name,</span><br><span class="line">            loading=&quot;lazy&quot;,</span><br><span class="line">            decoding=&quot;async&quot;,</span><br><span class="line">            referrerpolicy=&quot;no-referrer&quot;,</span><br><span class="line">            onerror=&quot;this.src=&#x27;/img/avatar-fallback.png&#x27;&quot;</span><br><span class="line">          )</span><br><span class="line">          .meta</span><br><span class="line">            h3= f.name</span><br><span class="line">            .title-line</span><br><span class="line">            if f.introduction</span><br><span class="line">              p= f.introduction</span><br><span class="line">          a.btn(href=f.url, target=&quot;_blank&quot;, rel=&quot;noopener&quot;)= f.title || &#x27;访问&#x27;</span><br><span class="line"></span><br><span class="line">    // 页面正文（保持你已有的）</span><br><span class="line">    if page.content</span><br><span class="line">    .post-content!= page.content</span><br><span class="line">    </span><br><span class="line">    // 评论（按 Butterfly 的评论系统设置显示）</span><br><span class="line">    if page.comments !== false</span><br><span class="line">      include includes/third-party/comments/index.pug</span><br><span class="line"></span><br><span class="line">    // ===== 直接内嵌 giscus（不再依赖主题的 comments 入口） =====</span><br><span class="line">    if page.comments !== false</span><br><span class="line">    - const g = theme.giscus || &#123;&#125;;</span><br><span class="line">    - const repo      = g.repo;</span><br><span class="line">    - const repoId    = g[&#x27;repo-id&#x27;] || g.repo_id;</span><br><span class="line">    - const category  = g.category;</span><br><span class="line">    - const catId     = g[&#x27;category-id&#x27;] || g.category_id;</span><br><span class="line">    - const mapping   = g.mapping || &#x27;pathname&#x27;;</span><br><span class="line">    - const strict    = (g.strict === 1 || g.strict === &#x27;1&#x27;) ? &#x27;1&#x27; : &#x27;0&#x27;;</span><br><span class="line">    - const reactions = g[&#x27;reactions-enabled&#x27;] || g.reactions_enabled || &#x27;1&#x27;;</span><br><span class="line">    - const emitMeta  = g[&#x27;emit-metadata&#x27;] || g.emit_metadata || &#x27;0&#x27;;</span><br><span class="line">    - const inputPos  = g[&#x27;input-position&#x27;] || g.input_position || &#x27;bottom&#x27;;</span><br><span class="line">    - const lang      = g.lang || &#x27;zh-CN&#x27;;</span><br><span class="line">    - const themeName = g.theme || &#x27;preferred_color_scheme&#x27;;</span><br><span class="line"></span><br><span class="line">    .giscus</span><br><span class="line">    script(</span><br><span class="line">        src=&quot;https://giscus.app/client.js&quot;</span><br><span class="line">        async</span><br><span class="line">        crossorigin=&quot;anonymous&quot;</span><br><span class="line">        data-repo=repo</span><br><span class="line">        data-repo-id=repoId</span><br><span class="line">        data-category=category</span><br><span class="line">        data-category-id=catId</span><br><span class="line">        data-mapping=mapping</span><br><span class="line">        data-strict=strict</span><br><span class="line">        data-reactions-enabled=reactions</span><br><span class="line">        data-emit-metadata=emitMeta</span><br><span class="line">        data-input-position=inputPos</span><br><span class="line">        data-lang=lang</span><br><span class="line">        data-theme=themeName</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a><strong>样式</strong></h2><p> 把下面这段保存为 <code>source/css/friends-matery.css</code>，并在 <code>themes/butterfly/_config.butterfly.yml</code> 里注入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* ========== friends-matery.css (clean) ========== */</span><br><span class="line"></span><br><span class="line">/* 顶部标题 */</span><br><span class="line">.friends-hero&#123;margin:16px 0 24px;text-align:center&#125;</span><br><span class="line">.friends-hero h1&#123;font-size:2rem;margin:0&#125;</span><br><span class="line"></span><br><span class="line">/* 网格容器 */</span><br><span class="line">.friends-grid&#123;</span><br><span class="line">  display:grid;</span><br><span class="line">  grid-template-columns:repeat(auto-fill,minmax(280px,1fr));</span><br><span class="line">  gap:18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 卡片基础（白卡） */</span><br><span class="line">.friend-card&#123;</span><br><span class="line">  position:relative;</span><br><span class="line">  padding:20px;</span><br><span class="line">  border-radius:20px;</span><br><span class="line">  border:1px solid var(--card-border,rgba(0,0,0,.06));</span><br><span class="line">  background:var(--card-bg,rgba(255,255,255,.6));</span><br><span class="line">  box-shadow:0 8px 26px rgba(0,0,0,.08);</span><br><span class="line">  backdrop-filter:saturate(1.05) blur(2px);</span><br><span class="line">  will-change:transform;</span><br><span class="line">  transition:transform .18s ease, box-shadow .18s ease, border-color .18s ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 悬停动效 */</span><br><span class="line">.friend-card:hover&#123;transform:translateY(-4px);box-shadow:0 14px 36px rgba(0,0,0,.12)&#125;</span><br><span class="line"></span><br><span class="line">/* —— 布局：左图右文 + 按钮吸底 —— */</span><br><span class="line">.friend-card&#123;</span><br><span class="line">  display:grid;</span><br><span class="line">  grid-template-columns:84px minmax(0,1fr);  /* 左头像 / 右内容 */</span><br><span class="line">  grid-template-rows:auto 1fr auto;          /* 标题 | 描述 | 按钮 */</span><br><span class="line">  column-gap:16px;</span><br><span class="line">  row-gap:8px;</span><br><span class="line">  align-items:start;</span><br><span class="line">  min-height:190px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 头像 */</span><br><span class="line">.friend-card .avatar&#123;</span><br><span class="line">  grid-column:1; grid-row:1 / span 3;</span><br><span class="line">  width:84px;height:84px;border-radius:50%;</span><br><span class="line">  border:3px solid transparent;object-fit:cover;align-self:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 右侧信息区 */</span><br><span class="line">.friend-card .meta&#123;grid-column:2;grid-row:1 / span 2;min-width:0;display:flex;flex-direction:column&#125;</span><br><span class="line"></span><br><span class="line">/* 标题更大 */</span><br><span class="line">.friend-card h3&#123;</span><br><span class="line">  margin:0;</span><br><span class="line">  font-weight:800;</span><br><span class="line">  font-size:1.5rem;</span><br><span class="line">  line-height:1.25;</span><br><span class="line">  letter-spacing:.2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 分隔线（白卡下为浅灰，渐变模式下会自动变浅白） */</span><br><span class="line">.friend-card .title-line&#123;</span><br><span class="line">  width:56px;height:3px;border-radius:2px;</span><br><span class="line">  background:rgba(0,0,0,.12);</span><br><span class="line">  margin:6px 0 8px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 描述，两行省略 */</span><br><span class="line">.friend-card p&#123;</span><br><span class="line">  margin:0;opacity:.9;</span><br><span class="line">  display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;</span><br><span class="line">  overflow:hidden;white-space:normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 按钮吸底 */</span><br><span class="line">.friend-card .btn&#123;</span><br><span class="line">  grid-column:2;grid-row:3;justify-self:center; /* 居中改为 center */</span><br><span class="line">  margin:0;border-radius:999px;</span><br><span class="line">  padding:.5rem .9rem;</span><br><span class="line">  border:1px solid rgba(0,0,0,.08);</span><br><span class="line">  font-weight:700;line-height:1;text-decoration:none;</span><br><span class="line">&#125;</span><br><span class="line">.friend-card .btn:hover&#123;box-shadow:0 6px 18px rgba(0,0,0,.12)&#125;</span><br><span class="line"></span><br><span class="line">/* 键盘可见焦点 */</span><br><span class="line">.friend-card:focus-within&#123;outline:3px solid rgba(59,130,246,.5);outline-offset:2px&#125;</span><br><span class="line"></span><br><span class="line">/* 深色模式 */</span><br><span class="line">:root[theme=&#x27;dark&#x27;] .friend-card&#123;</span><br><span class="line">  --card-bg:rgba(18,18,18,.65);</span><br><span class="line">  --card-border:rgba(255,255,255,.08);</span><br><span class="line">  box-shadow:0 10px 30px rgba(0,0,0,.45);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 低动效偏好 */</span><br><span class="line">@media (prefers-reduced-motion: reduce)&#123;</span><br><span class="line">  .friend-card,.friend-card:hover&#123;transform:none&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ===== 渐变彩卡（在容器 .friends-grid 上加 .gradient 即可启用） ===== */</span><br><span class="line">.friends-grid.gradient .friend-card&#123;</span><br><span class="line">  border:none;background:transparent;color:#fff;box-shadow:0 16px 36px rgba(0,0,0,.25);</span><br><span class="line">&#125;</span><br><span class="line">.friends-grid.gradient .friend-card::before&#123;</span><br><span class="line">  content:&quot;&quot;;position:absolute;inset:0;border-radius:inherit;z-index:0;</span><br><span class="line">  background:linear-gradient(135deg,var(--g1,#00c6ff),var(--g2,#0072ff));</span><br><span class="line">&#125;</span><br><span class="line">.friends-grid.gradient .friend-card &gt; *&#123;position:relative;z-index:1&#125;</span><br><span class="line">.friends-grid.gradient .title-line&#123;background:rgba(255,255,255,.35)&#125;</span><br><span class="line">.friends-grid.gradient .avatar&#123;border-color:rgba(255,255,255,.75)&#125;</span><br><span class="line">.friends-grid.gradient .btn&#123;background:rgba(255,255,255,.95);color:#111;border-color:transparent&#125;</span><br><span class="line">.friends-grid.gradient .btn:hover&#123;box-shadow:0 10px 24px rgba(0,0,0,.28)&#125;</span><br><span class="line"></span><br><span class="line">/* 6 组轮换渐变色（可按需改） */</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+1)&#123;--g1:#00c6ff;--g2:#0072ff&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+2)&#123;--g1:#7f00ff;--g2:#e100ff&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+3)&#123;--g1:#f093fb;--g2:#f5576c&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+4)&#123;--g1:#36d1dc;--g2:#5b86e5&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+5)&#123;--g1:#4facfe;--g2:#00f2fe&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n)&#123;--g1:#fa709a;--g2:#fee140&#125;</span><br><span class="line"></span><br><span class="line">/* 小屏优化 */</span><br><span class="line">@media (max-width:480px)&#123;</span><br><span class="line">  .friend-card&#123;grid-template-columns:72px 1fr;min-height:170px&#125;</span><br><span class="line">  .friend-card .avatar&#123;width:72px;height:72px&#125;</span><br><span class="line">  .friend-card h3&#123;font-size:1.12rem&#125;</span><br><span class="line">&#125;</span><br><span class="line">/* ========== friends-matery.css (clean) ========== */</span><br><span class="line"></span><br><span class="line">/* 顶部标题 */</span><br><span class="line">.friends-hero&#123;margin:16px 0 24px;text-align:center&#125;</span><br><span class="line">.friends-hero h1&#123;font-size:2rem;margin:0&#125;</span><br><span class="line"></span><br><span class="line">/* 网格容器 */</span><br><span class="line">.friends-grid&#123;</span><br><span class="line">  display:grid;</span><br><span class="line">  grid-template-columns:repeat(auto-fill,minmax(280px,1fr));</span><br><span class="line">  gap:18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 卡片基础（白卡） */</span><br><span class="line">.friend-card&#123;</span><br><span class="line">  position:relative;</span><br><span class="line">  padding:20px;</span><br><span class="line">  border-radius:20px;</span><br><span class="line">  border:1px solid var(--card-border,rgba(0,0,0,.06));</span><br><span class="line">  background:var(--card-bg,rgba(255,255,255,.6));</span><br><span class="line">  box-shadow:0 8px 26px rgba(0,0,0,.08);</span><br><span class="line">  backdrop-filter:saturate(1.05) blur(2px);</span><br><span class="line">  will-change:transform;</span><br><span class="line">  transition:transform .18s ease, box-shadow .18s ease, border-color .18s ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 悬停动效 */</span><br><span class="line">.friend-card:hover&#123;transform:translateY(-4px);box-shadow:0 14px 36px rgba(0,0,0,.12)&#125;</span><br><span class="line"></span><br><span class="line">/* —— 布局：左图右文 + 按钮吸底 —— */</span><br><span class="line">.friend-card&#123;</span><br><span class="line">  display:grid;</span><br><span class="line">  grid-template-columns:84px minmax(0,1fr);  /* 左头像 / 右内容 */</span><br><span class="line">  grid-template-rows:auto 1fr auto;          /* 标题 | 描述 | 按钮 */</span><br><span class="line">  column-gap:16px;</span><br><span class="line">  row-gap:8px;</span><br><span class="line">  align-items:start;</span><br><span class="line">  min-height:190px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 头像 */</span><br><span class="line">.friend-card .avatar&#123;</span><br><span class="line">  grid-column:1; grid-row:1 / span 3;</span><br><span class="line">  width:84px;height:84px;border-radius:50%;</span><br><span class="line">  border:3px solid transparent;object-fit:cover;align-self:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 右侧信息区 */</span><br><span class="line">.friend-card .meta&#123;grid-column:2;grid-row:1 / span 2;min-width:0;display:flex;flex-direction:column&#125;</span><br><span class="line"></span><br><span class="line">/* 标题更大 */</span><br><span class="line">.friend-card h3&#123;</span><br><span class="line">  margin:0;</span><br><span class="line">  font-weight:800;</span><br><span class="line">  font-size:1.25rem;</span><br><span class="line">  line-height:1.25;</span><br><span class="line">  letter-spacing:.2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 分隔线（白卡下为浅灰，渐变模式下会自动变浅白） */</span><br><span class="line">.friend-card .title-line&#123;</span><br><span class="line">  width:56px;height:3px;border-radius:2px;</span><br><span class="line">  background:rgba(0,0,0,.12);</span><br><span class="line">  margin:6px 0 8px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 描述，两行省略 */</span><br><span class="line">.friend-card p&#123;</span><br><span class="line">  margin:0;opacity:.9;</span><br><span class="line">  display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;</span><br><span class="line">  overflow:hidden;white-space:normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 按钮吸底 */</span><br><span class="line">.friend-card .btn&#123;</span><br><span class="line">  grid-column:2;grid-row:3;justify-self:start; /* 居中改为 center */</span><br><span class="line">  margin:0;border-radius:999px;</span><br><span class="line">  padding:.5rem .9rem;</span><br><span class="line">  border:1px solid rgba(0,0,0,.08);</span><br><span class="line">  font-weight:700;line-height:1;text-decoration:none;</span><br><span class="line">&#125;</span><br><span class="line">.friend-card .btn:hover&#123;box-shadow:0 6px 18px rgba(0,0,0,.12)&#125;</span><br><span class="line"></span><br><span class="line">/* 键盘可见焦点 */</span><br><span class="line">.friend-card:focus-within&#123;outline:3px solid rgba(59,130,246,.5);outline-offset:2px&#125;</span><br><span class="line"></span><br><span class="line">/* 深色模式 */</span><br><span class="line">:root[theme=&#x27;dark&#x27;] .friend-card&#123;</span><br><span class="line">  --card-bg:rgba(18,18,18,.65);</span><br><span class="line">  --card-border:rgba(255,255,255,.08);</span><br><span class="line">  box-shadow:0 10px 30px rgba(0,0,0,.45);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 低动效偏好 */</span><br><span class="line">@media (prefers-reduced-motion: reduce)&#123;</span><br><span class="line">  .friend-card,.friend-card:hover&#123;transform:none&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ===== 渐变彩卡（在容器 .friends-grid 上加 .gradient 即可启用） ===== */</span><br><span class="line">.friends-grid.gradient .friend-card&#123;</span><br><span class="line">  border:none;background:transparent;color:#fff;box-shadow:0 16px 36px rgba(0,0,0,.25);</span><br><span class="line">&#125;</span><br><span class="line">.friends-grid.gradient .friend-card::before&#123;</span><br><span class="line">  content:&quot;&quot;;position:absolute;inset:0;border-radius:inherit;z-index:0;</span><br><span class="line">  background:linear-gradient(135deg,var(--g1,#00c6ff),var(--g2,#0072ff));</span><br><span class="line">&#125;</span><br><span class="line">.friends-grid.gradient .friend-card &gt; *&#123;position:relative;z-index:1&#125;</span><br><span class="line">.friends-grid.gradient .title-line&#123;background:rgba(255,255,255,.35)&#125;</span><br><span class="line">.friends-grid.gradient .avatar&#123;border-color:rgba(255,255,255,.75)&#125;</span><br><span class="line">.friends-grid.gradient .btn&#123;background:rgba(255,255,255,.95);color:#111;border-color:transparent&#125;</span><br><span class="line">.friends-grid.gradient .btn:hover&#123;box-shadow:0 10px 24px rgba(0,0,0,.28)&#125;</span><br><span class="line"></span><br><span class="line">/* 6 组轮换渐变色（可按需改） */</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+1)&#123;--g1:#00c6ff;--g2:#0072ff&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+2)&#123;--g1:#7f00ff;--g2:#e100ff&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+3)&#123;--g1:#f093fb;--g2:#f5576c&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+4)&#123;--g1:#36d1dc;--g2:#5b86e5&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+5)&#123;--g1:#4facfe;--g2:#00f2fe&#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n)&#123;--g1:#fa709a;--g2:#fee140&#125;</span><br><span class="line"></span><br><span class="line">/* 小屏优化 */</span><br><span class="line">@media (max-width:480px)&#123;</span><br><span class="line">  .friend-card&#123;grid-template-columns:72px 1fr;min-height:170px&#125;</span><br><span class="line">  .friend-card .avatar&#123;width:72px;height:72px&#125;</span><br><span class="line">  .friend-card h3&#123;font-size:1.12rem&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* —— 布局与间距微调 —— */</span><br><span class="line">.friends-grid&#123;</span><br><span class="line">  grid-template-columns:repeat(auto-fill,minmax(280px,1fr)); /* 卡片更稳 */</span><br><span class="line">  gap:18px;</span><br><span class="line">&#125;</span><br><span class="line">.friend-card&#123;</span><br><span class="line">  padding:20px;</span><br><span class="line">  border-radius:20px;</span><br><span class="line">  display:flex;              /* 统一卡片高度 */</span><br><span class="line">  flex-direction:column;</span><br><span class="line">  min-height:190px;</span><br><span class="line">  will-change:transform;</span><br><span class="line">  transition:transform .18s ease, box-shadow .18s ease, border-color .18s ease;</span><br><span class="line">  border:1px solid var(--card-border, rgba(0,0,0,.06));</span><br><span class="line">  box-shadow:0 8px 26px rgba(0,0,0,.08);</span><br><span class="line">&#125;</span><br><span class="line">.friend-card:hover&#123;</span><br><span class="line">  transform:translateY(-4px);</span><br><span class="line">  box-shadow:0 14px 36px rgba(0,0,0,.12);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* —— 头像、标题、描述 —— */</span><br><span class="line">.friend-card .avatar&#123;</span><br><span class="line">  width:80px; height:80px;</span><br><span class="line">  margin:2px 0 12px;</span><br><span class="line">  border-radius:50%;</span><br><span class="line">  border:3px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line">.friend-card h3&#123;</span><br><span class="line">  margin:.1rem 0 .35rem;</span><br><span class="line">  font-weight:800;</span><br><span class="line">  letter-spacing:.2px;</span><br><span class="line">&#125;</span><br><span class="line">.friend-card p&#123;</span><br><span class="line">  margin:0 0 1rem;</span><br><span class="line">  opacity:.9;</span><br><span class="line">  /* 描述两行省略 */</span><br><span class="line">  display:-webkit-box;</span><br><span class="line">  -webkit-line-clamp:2;</span><br><span class="line">  -webkit-box-orient:vertical;</span><br><span class="line">  overflow:hidden;</span><br><span class="line">  white-space:normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* —— 按钮强化，贴底 —— */</span><br><span class="line">.friend-card .btn&#123;</span><br><span class="line">  margin-top:auto;</span><br><span class="line">  border-radius:999px;</span><br><span class="line">  padding:.5rem .9rem;</span><br><span class="line">  border:1px solid rgba(0,0,0,.08);</span><br><span class="line">  font-weight:700;</span><br><span class="line">&#125;</span><br><span class="line">.friend-card .btn:hover&#123; box-shadow:0 6px 18px rgba(0,0,0,.12); &#125;</span><br><span class="line"></span><br><span class="line">/* —— 可见焦点（键盘无障碍） —— */</span><br><span class="line">.friend-card:focus-within&#123;</span><br><span class="line">  outline:3px solid rgba(59,130,246,.5);</span><br><span class="line">  outline-offset:2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* —— 深色模式对比度 —— */</span><br><span class="line">:root[theme=&#x27;dark&#x27;] .friend-card&#123;</span><br><span class="line">  --card-bg:rgba(18,18,18,.65);</span><br><span class="line">  --card-border:rgba(255,255,255,.08);</span><br><span class="line">  box-shadow:0 10px 30px rgba(0,0,0,.45);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* —— 低动效偏好 —— */</span><br><span class="line">@media (prefers-reduced-motion: reduce)&#123;</span><br><span class="line">  .friend-card, .friend-card:hover&#123; transform:none; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* =========================</span><br><span class="line">   可选：渐变彩卡风格（开关见第 3 部分）</span><br><span class="line">   ========================= */</span><br><span class="line">.friends-grid.gradient .friend-card&#123;</span><br><span class="line">  position:relative;</span><br><span class="line">  border:none;</span><br><span class="line">  color:#fff;</span><br><span class="line">  background:transparent;</span><br><span class="line">  box-shadow:0 16px 36px rgba(0,0,0,.25);</span><br><span class="line">&#125;</span><br><span class="line">.friends-grid.gradient .friend-card::before&#123;</span><br><span class="line">  content:&quot;&quot;;</span><br><span class="line">  position:absolute; inset:0; z-index:0; border-radius:inherit;</span><br><span class="line">  background:linear-gradient(135deg,var(--g1,#00c6ff),var(--g2,#0072ff));</span><br><span class="line">&#125;</span><br><span class="line">.friends-grid.gradient .friend-card &gt; *&#123; position:relative; z-index:1; &#125;</span><br><span class="line">.friends-grid.gradient .avatar&#123; border-color:rgba(255,255,255,.7); &#125;</span><br><span class="line">.friends-grid.gradient .btn&#123;</span><br><span class="line">  background:rgba(255,255,255,.92);</span><br><span class="line">  color:#111; border-color:transparent;</span><br><span class="line">&#125;</span><br><span class="line">.friends-grid.gradient .btn:hover&#123; box-shadow:0 10px 24px rgba(0,0,0,.28); &#125;</span><br><span class="line"></span><br><span class="line">/* 自动配色（6色轮替），想要更个性可以自行改色值 */</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+1)&#123; --g1:#00c6ff; --g2:#0072ff; &#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+2)&#123; --g1:#7f00ff; --g2:#e100ff; &#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+3)&#123; --g1:#f093fb; --g2:#f5576c; &#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+4)&#123; --g1:#36d1dc; --g2:#5b86e5; &#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n+5)&#123; --g1:#4facfe; --g2:#00f2fe; &#125;</span><br><span class="line">.friends-grid.gradient .friend-card:nth-child(6n)&#123;   --g1:#fa709a; --g2:#fee140; &#125;</span><br><span class="line"></span><br><span class="line">/* —— 按钮加长（覆盖前面的规则） —— */</span><br><span class="line">.friends-grid .friend-card .btn&#123;</span><br><span class="line">  min-width: 250px;      /* 想再长一点就调成 180/200px */</span><br><span class="line">  padding: .6rem 1.2rem; /* 稍加粗手感 */</span><br><span class="line">  font-size: .95rem;</span><br><span class="line">  letter-spacing: .2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 小屏略收一点 */</span><br><span class="line">@media (max-width: 480px)&#123;</span><br><span class="line">  .friends-grid .friend-card .btn&#123; min-width: 140px; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="页面-Front-Matter"><a href="#页面-Front-Matter" class="headerlink" title="页面 Front-Matter"></a><strong>页面 Front-Matter</strong></h2><p> 把你的友链页（<code>source/link/index.md</code> 或 <code>source/friends/index.md</code>）头部写成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友人帐</span><br><span class="line">layout: friends-matery</span><br><span class="line">gradient: true   # ← 想关闭渐变就删掉这一行或设为 false</span><br><span class="line">comments: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 效果图可以查看我的博客&lt;code&gt;友人帐&lt;/code&gt;页面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数据-（统一写-JSON，和-Matery-同款字段，后续可迁移很方便）&quot;&gt;&lt;a href=&quot;#数据-（统一写-JSON，和-Mate</summary>
      
    
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置追番页面 — Node.js 22</title>
    <link href="https://wenjiew-astro.github.io/2025/09/01/hexo%E9%85%8D%E7%BD%AE%E8%BF%BD%E7%95%AA%E9%A1%B5%E9%9D%A2%20%E2%80%94%20Node.js%2022/"/>
    <id>https://wenjiew-astro.github.io/2025/09/01/hexo%E9%85%8D%E7%BD%AE%E8%BF%BD%E7%95%AA%E9%A1%B5%E9%9D%A2%20%E2%80%94%20Node.js%2022/</id>
    <published>2025-08-31T16:00:00.000Z</published>
    <updated>2025-09-01T11:07:00.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo配置追番页面-—-Node-js-22"><a href="#hexo配置追番页面-—-Node-js-22" class="headerlink" title="hexo配置追番页面 — Node.js 22"></a>hexo配置追番页面 — Node.js 22</h1><blockquote><p>hexo 可以连接bilibili，加一个番剧页面，但是网上很多教程都是使用 <code>hexo-bilibili-bangumi</code> 这个插件实现的，但是 <code>hexo-bilibili-bangumi</code> 在 Node.js 18+ 下无法使用，所以我就重新做了一个新的加载方法。</p><p>效果可以看我的博客<a href="https://wenjiew-astro.github.io/">Wenjie Wang - 拾光的老人</a>中 <code>生活/追番</code> 页面</p></blockquote><h2 id="一、抓取脚本（构建时拉取-B-站数据）"><a href="#一、抓取脚本（构建时拉取-B-站数据）" class="headerlink" title="一、抓取脚本（构建时拉取 B 站数据）"></a>一、抓取脚本（构建时拉取 B 站数据）</h2><p>新建文件：<code>source/scripts/fetch_bangumi.cjs</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// source/scripts/fetch_bangumi.cjs</span><br><span class="line">const fs = require(&quot;fs&quot;);</span><br><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">// 必填：你的 B 站 UID（纯数字）</span><br><span class="line">const UID = process.env.BILI_UID || &quot;3493143351659309&quot;;</span><br><span class="line">// 选填：追番列表不公开时需要（浏览器 Cookie 中的 SESSDATA 值）</span><br><span class="line">const SESSDATA = process.env.BILI_SESSDATA || &quot;&quot;;</span><br><span class="line"></span><br><span class="line">const API_BASE = &quot;https://api.bilibili.com/x/space/bangumi/follow/list&quot;;</span><br><span class="line">const PAGE_SIZE = 30; // B站分页</span><br><span class="line">const TYPE_NUM = 1;   // 1=番剧，2=追剧（当前只抓番剧）</span><br><span class="line"></span><br><span class="line">async function requestOnce(status, pn) &#123;</span><br><span class="line">  const url = `$&#123;API_BASE&#125;?vmid=$&#123;UID&#125;&amp;type=$&#123;TYPE_NUM&#125;&amp;follow_status=$&#123;status&#125;&amp;ps=$&#123;PAGE_SIZE&#125;&amp;pn=$&#123;pn&#125;`;</span><br><span class="line">  const headers = &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0&quot;,</span><br><span class="line">    &quot;Referer&quot;: &quot;https://www.bilibili.com/&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">  if (SESSDATA) headers[&quot;cookie&quot;] = `SESSDATA=$&#123;SESSDATA&#125;;`;</span><br><span class="line"></span><br><span class="line">  const res = await fetch(url, &#123; headers &#125;);</span><br><span class="line">  if (!res.ok) throw new Error(`HTTP $&#123;res.status&#125;`);</span><br><span class="line">  const data = await res.json();</span><br><span class="line">  if (data.code !== 0) &#123;</span><br><span class="line">    throw new Error(`Bilibili API error: code=$&#123;data.code&#125;, message=$&#123;data.message&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">  return data.data || &#123; list: [] &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function fetchAll(status) &#123;</span><br><span class="line">  let pn = 1;</span><br><span class="line">  const out = [];</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    const data = await requestOnce(status, pn);</span><br><span class="line">    const list = data.list || [];</span><br><span class="line">    for (const b of list) &#123;</span><br><span class="line">      let cover = b?.cover || &quot;&quot;;</span><br><span class="line">      if (cover.startsWith(&quot;http://&quot;)) cover = cover.replace(&quot;http://&quot;, &quot;https://&quot;);</span><br><span class="line">      out.push(&#123;</span><br><span class="line">        title: b?.title ?? &quot;&quot;,</span><br><span class="line">        cover: cover,</span><br><span class="line">        new_ep: b?.new_ep?.title ?? &quot;&quot;,</span><br><span class="line">        total_count: b?.total_count ?? -1,</span><br><span class="line">        media_id: b?.media_id ?? 0,</span><br><span class="line">        season_id: b?.season_id ?? 0,   // ← 新增：优先直达播放页</span><br><span class="line">        area: b?.areas?.[0]?.name ?? &quot;&quot;,</span><br><span class="line">        type_name: b?.season_type_name ?? &quot;&quot;,</span><br><span class="line">        evaluate: b?.evaluate ?? &quot;&quot;,</span><br><span class="line">        stat: b?.stat ?? &#123;&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (list.length &lt; PAGE_SIZE) break;</span><br><span class="line">    pn += 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">  if (!/^\d+$/.test(UID)) &#123;</span><br><span class="line">    throw new Error(&quot;请设置环境变量 BILI_UID 为你的 B 站 UID（纯数字）。&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  console.log(`[bangumi] Fetching UID=$&#123;UID&#125; ...`);</span><br><span class="line">  const wantWatch = await fetchAll(1); // 想看</span><br><span class="line">  const watching  = await fetchAll(2); // 在看</span><br><span class="line">  const watched   = await fetchAll(3); // 已看</span><br><span class="line"></span><br><span class="line">  const outDir = path.resolve(process.cwd(), &quot;source/bangumi&quot;);</span><br><span class="line">  fs.mkdirSync(outDir, &#123; recursive: true &#125;);</span><br><span class="line">  const outPath = path.join(outDir, &quot;data.json&quot;);</span><br><span class="line">  fs.writeFileSync(outPath, JSON.stringify(&#123; wantWatch, watching, watched &#125;, null, 2), &quot;utf-8&quot;);</span><br><span class="line">  console.log(`[bangumi] Saved $&#123;wantWatch.length + watching.length + watched.length&#125; items -&gt; $&#123;outPath&#125;`);</span><br><span class="line">&#125;)().catch(err =&gt; &#123;</span><br><span class="line">  console.error(&quot;[bangumi] Failed:&quot;, err);</span><br><span class="line">  process.exit(1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>若你的追番列表是<strong>非公开</strong>，要在系统里设置环境变量 <code>BILI_SESSDATA</code>（从浏览器 Cookie 里复制自己的 <code>SESSDATA</code> 值），否则接口可能返回空数组。</p></blockquote><h2 id="二、页面（读取本地-JSON-渲染三个标签）"><a href="#二、页面（读取本地-JSON-渲染三个标签）" class="headerlink" title="二、页面（读取本地 JSON 渲染三个标签）"></a>二、页面（读取本地 JSON 渲染三个标签）</h2><p>新建文件：<code>source/bangumi/index.md</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 谁不热爱追番呢</span><br><span class="line">date: 2025-09-01</span><br><span class="line">layout: page</span><br><span class="line">comments: false</span><br><span class="line">top_img: img/top_img/bangumi.png</span><br><span class="line">---</span><br><span class="line">&lt;div id=&quot;bangumi-root&quot;&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    /* :root &#123; --card:#fff; --muted:#6b7280; --border:#e5e7eb; --bg:#f8fafc; &#125; */</span><br><span class="line">    #bangumi-root &#123; margin:0; &#125;</span><br><span class="line">    .bangumi-header &#123; padding:24px 16px; text-align:center; background:var(--bg); &#125;</span><br><span class="line">    .bangumi-title &#123; margin:0 0 8px; font-size:30px; &#125;</span><br><span class="line">    .tabs &#123; display:flex; justify-content:center; gap:8px; flex-wrap:wrap; &#125;</span><br><span class="line">    .tab &#123; padding:8px 14px; border:1px solid var(--border); background:#fff; border-radius:10px; cursor:pointer; &#125;</span><br><span class="line">    .tab.active &#123; border-color:#3b82f6; color:#1f2937; box-shadow:0 1px 2px rgba(0,0,0,.06); &#125;</span><br><span class="line">    .bangumi-main &#123; padding:16px; max-width:1100px; margin:0 auto; &#125;</span><br><span class="line">    .grid &#123; display:grid; grid-template-columns:repeat(auto-fill,minmax(180px,1fr)); gap:14px; &#125;</span><br><span class="line">    .card &#123; background:var(--card); border:1px solid var(--border); border-radius:12px; overflow:hidden; transition:transform .15s ease; &#125;</span><br><span class="line">    .card:hover &#123; transform:translateY(-2px); &#125;</span><br><span class="line">    .thumb &#123; display:block; width:100%; aspect-ratio:10/14; object-fit:cover; background:#eef2f7; &#125;</span><br><span class="line">    .content &#123; padding:10px; &#125;</span><br><span class="line">    .title &#123; margin:0 0 6px; font-size:14px; line-height:1.35; &#125;</span><br><span class="line">    .meta &#123; margin:0; font-size:12px; color:var(--muted); &#125;</span><br><span class="line">    .empty &#123; text-align:center; color:var(--muted); padding:40px 0; &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;bangumi-header&quot;&gt;</span><br><span class="line">    &lt;h1 class=&quot;bangumi-title&quot;&gt;📺 我的追番&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;tabs&quot;&gt;</span><br><span class="line">      &lt;button class=&quot;tab&quot; data-key=&quot;watching&quot;&gt;在看&lt;/button&gt;</span><br><span class="line">      &lt;button class=&quot;tab active&quot; data-key=&quot;wantWatch&quot;&gt;想看&lt;/button&gt;</span><br><span class="line">      &lt;button class=&quot;tab&quot; data-key=&quot;watched&quot;&gt;已看&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;bangumi-main&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;grid&quot; class=&quot;grid&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;empty&quot; class=&quot;empty&quot; style=&quot;display:none;&quot;&gt;暂无数据，请先执行抓取脚本。&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function () &#123;</span><br><span class="line">  const PROXY_ON = true; // 若封面不显示，保持 true 通过代理加载；若你不想代理，可改为 false</span><br><span class="line">  const PROXY = (url) =&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      if (!url) return &quot;&quot;;</span><br><span class="line">      // 统一成 https</span><br><span class="line">      if (url.startsWith(&quot;//&quot;)) url = &quot;https:&quot; + url;</span><br><span class="line">      if (url.startsWith(&quot;http://&quot;)) url = url.replace(&quot;http://&quot;, &quot;https://&quot;);</span><br><span class="line">      if (!PROXY_ON) return url;</span><br><span class="line">      // 走公开镜像，避免防盗链（不带协议的域名）</span><br><span class="line">      const clean = url.replace(/^https?:\/\//, &quot;&quot;);</span><br><span class="line">      return &quot;https://images.weserv.nl/?url=&quot; + encodeURIComponent(clean);</span><br><span class="line">    &#125; catch (e) &#123; return url || &quot;&quot;; &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const GRID  = document.getElementById(&quot;grid&quot;);</span><br><span class="line">  const EMPTY = document.getElementById(&quot;empty&quot;);</span><br><span class="line">  const TABS  = Array.from(document.querySelectorAll(&quot;.tab&quot;));</span><br><span class="line">  let DATA = &#123; wantWatch:[], watching:[], watched:[] &#125;;</span><br><span class="line">  let currentKey = &quot;watching&quot;;</span><br><span class="line"></span><br><span class="line">  function fmtTotal(n) &#123;</span><br><span class="line">    if (n === -1) return &quot;未完结&quot;;</span><br><span class="line">    if (!n || n &lt;= 0) return &quot;&quot;;</span><br><span class="line">    return `全$&#123;n&#125;话`;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function render(key) &#123;</span><br><span class="line">    GRID.innerHTML = &quot;&quot;;</span><br><span class="line">    const list = DATA[key] || [];</span><br><span class="line">    if (!list.length) &#123; EMPTY.style.display = &quot;block&quot;; return; &#125;</span><br><span class="line">    EMPTY.style.display = &quot;none&quot;;</span><br><span class="line"></span><br><span class="line">    const frag = document.createDocumentFragment();</span><br><span class="line">    list.forEach(b =&gt; &#123;</span><br><span class="line">      const card = document.createElement(&quot;article&quot;);</span><br><span class="line">      card.className = &quot;card&quot;;</span><br><span class="line"></span><br><span class="line">      // 计算跳转链接：优先 season_id（播放页），否则 media_id（媒体页）</span><br><span class="line">      const href =</span><br><span class="line">        (b.season_id &amp;&amp; `https://www.bilibili.com/bangumi/play/ss$&#123;b.season_id&#125;`) ||</span><br><span class="line">        (b.media_id  &amp;&amp; `https://www.bilibili.com/bangumi/media/md$&#123;b.media_id&#125;`) ||</span><br><span class="line">        &quot;&quot;;</span><br><span class="line"></span><br><span class="line">      // 封面（加链接）</span><br><span class="line">      const img = document.createElement(&quot;img&quot;);</span><br><span class="line">      img.className = &quot;thumb&quot;;</span><br><span class="line">      img.loading = &quot;lazy&quot;;</span><br><span class="line">      img.referrerPolicy = &quot;no-referrer&quot;;</span><br><span class="line">      img.alt = b.title || &quot;&quot;;</span><br><span class="line">      img.src = PROXY(b.cover);</span><br><span class="line">      img.onerror = () =&gt; &#123; img.onerror = null; img.src = (b.cover || &quot;&quot;).replace(/^http:\/\//,&quot;https://&quot;); &#125;;</span><br><span class="line"></span><br><span class="line">      if (href) &#123;</span><br><span class="line">        const aImg = document.createElement(&quot;a&quot;);</span><br><span class="line">        aImg.href = href; aImg.target = &quot;_blank&quot;; aImg.rel = &quot;noopener noreferrer&quot;;</span><br><span class="line">        aImg.appendChild(img);</span><br><span class="line">        card.appendChild(aImg);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        card.appendChild(img);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 文本区</span><br><span class="line">      const box = document.createElement(&quot;div&quot;);</span><br><span class="line">      box.className = &quot;content&quot;;</span><br><span class="line"></span><br><span class="line">      // 标题（加链接）</span><br><span class="line">      const h3 = document.createElement(&quot;h3&quot;);</span><br><span class="line">      h3.className = &quot;title&quot;;</span><br><span class="line">      if (href) &#123;</span><br><span class="line">        const aTitle = document.createElement(&quot;a&quot;);</span><br><span class="line">        aTitle.href = href; aTitle.target = &quot;_blank&quot;; aTitle.rel = &quot;noopener noreferrer&quot;;</span><br><span class="line">        aTitle.textContent = b.title || &quot;未命名&quot;;</span><br><span class="line">        h3.appendChild(aTitle);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        h3.textContent = b.title || &quot;未命名&quot;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      const p = document.createElement(&quot;p&quot;);</span><br><span class="line">      p.className = &quot;meta&quot;;</span><br><span class="line">      const items = [</span><br><span class="line">        b.new_ep ? `进度：$&#123;b.new_ep&#125;` : &quot;&quot;,</span><br><span class="line">        (b.total_count === -1) ? &quot;未完结&quot; : (b.total_count &gt; 0 ? `全$&#123;b.total_count&#125;话` : &quot;&quot;),</span><br><span class="line">        b.area ? `地区：$&#123;b.area&#125;` : &quot;&quot;</span><br><span class="line">      ].filter(Boolean);</span><br><span class="line">      p.textContent = items.join(&quot; · &quot;);</span><br><span class="line"></span><br><span class="line">      box.appendChild(h3);</span><br><span class="line">      box.appendChild(p);</span><br><span class="line">      card.appendChild(box);</span><br><span class="line"></span><br><span class="line">      frag.appendChild(card);</span><br><span class="line">    &#125;);</span><br><span class="line">    GRID.appendChild(frag);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  async function boot() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      const res = await fetch(&quot;./data.json?_t=&quot; + Date.now());</span><br><span class="line">      if (!res.ok) throw new Error(&quot;data.json not found&quot;);</span><br><span class="line">      DATA = await res.json();</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      console.error(e);</span><br><span class="line">      DATA = &#123; wantWatch:[], watching:[], watched:[] &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render(currentKey);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TABS.forEach(tab =&gt; &#123;</span><br><span class="line">    tab.addEventListener(&quot;click&quot;, () =&gt; &#123;</span><br><span class="line">      TABS.forEach(t =&gt; t.classList.remove(&quot;active&quot;));</span><br><span class="line">      tab.classList.add(&quot;active&quot;);</span><br><span class="line">      currentKey = tab.dataset.key;</span><br><span class="line">      render(currentKey);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  boot();</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、把它接入-Hexo"><a href="#三、把它接入-Hexo" class="headerlink" title="三、把它接入 Hexo"></a>三、把它接入 Hexo</h2><ol><li>安装依赖：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i axios --save</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>package.json</code> 替换成如下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;bangumi:fetch&quot;: &quot;node source/scripts/fetch_bangumi.cjs&quot;,</span><br><span class="line">    &quot;prebuild&quot;: &quot;npm run bangumi:fetch&quot;,</span><br><span class="line">    &quot;preserver&quot;: &quot;npm run bangumi:fetch&quot;,</span><br><span class="line">    &quot;predeploy&quot;: &quot;npm run bangumi:fetch &amp;&amp; hexo generate&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class="line">    &quot;server&quot;: &quot;hexo server&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;npm run server&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;7.3.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;add&quot;: &quot;^2.0.6&quot;,</span><br><span class="line">    &quot;axios&quot;: &quot;^1.11.0&quot;,</span><br><span class="line">    &quot;hexo&quot;: &quot;^7.3.0&quot;,</span><br><span class="line">    &quot;hexo-butterfly-artitalk&quot;: &quot;^1.0.5&quot;,</span><br><span class="line">    &quot;hexo-butterfly-categories-card&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-butterfly-envelope&quot;: &quot;^1.0.15&quot;,</span><br><span class="line">    &quot;hexo-butterfly-hpptalk&quot;: &quot;^1.0.4&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-feed&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-search&quot;: &quot;^2.4.3&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-helper-live2d&quot;: &quot;^3.1.0&quot;,</span><br><span class="line">    &quot;hexo-next-giscus&quot;: &quot;^1.3.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-pug&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-tag-plugins&quot;: &quot;^1.0.5&quot;,</span><br><span class="line">    &quot;hexo-theme-landscape&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-wordcount&quot;: &quot;^6.0.1&quot;,</span><br><span class="line">    &quot;i&quot;: &quot;^0.3.7&quot;,</span><br><span class="line">    &quot;image-size&quot;: &quot;^2.0.2&quot;,</span><br><span class="line">    &quot;install&quot;: &quot;^0.13.0&quot;,</span><br><span class="line">    &quot;live2d-widget-model-koharu&quot;: &quot;^1.0.5&quot;,</span><br><span class="line">    &quot;live2d-widget-model-miku&quot;: &quot;^1.0.5&quot;,</span><br><span class="line">    &quot;live2d-widget-model-wanko&quot;: &quot;^1.0.5&quot;,</span><br><span class="line">    &quot;or&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;yarn&quot;: &quot;^1.22.22&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>其实就是把下面这一部分代码加进去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;bangumi:fetch&quot;: &quot;node scripts/fetch_bangumi.mjs&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;npm run bangumi:fetch &amp;&amp; hexo g&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;npm run bangumi:fetch &amp;&amp; hexo s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ol start="3"><li>设置你的 UID（以及可选的 SESSDATA）后运行：</li></ol><ul><li><p>PowerShell（Windows）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$env:BILI_UID=&quot;你的B站UID&quot;</span><br><span class="line"># 若追番是私密的，还需要：</span><br><span class="line"># $env:BILI_SESSDATA=&quot;你的SESSDATA&quot;</span><br><span class="line"></span><br><span class="line">npm run build   # 会先自动抓取 -&gt; 生成 data.json -&gt; 再生成站点</span><br><span class="line">npm run server  # 预览 http://localhost:4000/bangumi/</span><br></pre></td></tr></table></figure></li><li><p>或者临时前缀（Git Bash&#x2F;CMD）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BILI_UID=你的UID npm run start</span><br><span class="line"># 可选：BILI_SESSDATA=你的SESSDATA npm run start</span><br></pre></td></tr></table></figure></li></ul><p>脚本会生成：<code>source/bangumi/data.json</code><br>然后你的 <code>source/bangumi/index.md</code> 页面（我之前给的那个）会从同目录读取 <code>data.json</code>，三个标签「想看&#x2F;在看&#x2F;已看」就会有内容了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以后使用的话要先运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build   # 自动抓取 -&gt; 生成 data.json -&gt; 再生成站点</span><br></pre></td></tr></table></figure><p>之后正常运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>预览 <a href="http://localhost:4000/">http://localhost:4000</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo配置追番页面-—-Node-js-22&quot;&gt;&lt;a href=&quot;#hexo配置追番页面-—-Node-js-22&quot; class=&quot;headerlink&quot; title=&quot;hexo配置追番页面 — Node.js 22&quot;&gt;&lt;/a&gt;hexo配置追番页面 — Node</summary>
      
    
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://wenjiew-astro.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置相册页面</title>
    <link href="https://wenjiew-astro.github.io/2025/09/01/hexo%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%86%8C%E9%A1%B5%E9%9D%A2/"/>
    <id>https://wenjiew-astro.github.io/2025/09/01/hexo%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%86%8C%E9%A1%B5%E9%9D%A2/</id>
    <published>2025-08-31T16:00:00.000Z</published>
    <updated>2025-09-01T14:52:39.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo配置相册页面"><a href="#hexo配置相册页面" class="headerlink" title="hexo配置相册页面"></a>hexo配置相册页面</h1><blockquote><p>相册演示地址:<a href="https://wenjiew-astro.github.io/photos/">光影流年 | Wenjie Wang</a> 。本文是基于Hexo 7.3.0开发！！主要实现相册集以及相册页面功能。</p></blockquote><h2 id="1-创建相册页面"><a href="#1-创建相册页面" class="headerlink" title="1.创建相册页面"></a>1.创建相册页面</h2><p>在自己的博客项目下，新建相册页</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page photos</span><br></pre></td></tr></table></figure><p>编辑 &#x2F;source&#x2F;photos&#x2F;index.md，输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 光影流年</span><br><span class="line">date: 2025-08-25</span><br><span class="line">layout: photo</span><br><span class="line">top_img: img/top_img/photo.png</span><br><span class="line">---</span><br><span class="line">&lt;!-- 分组封面索引 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;galleryIntro&quot; class=&quot;gallery-intro&quot;&gt;“ 这里有光影流年，还把喜欢装进云朵，相拥在明天的河岸。 ”&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;galleryIndex&quot; class=&quot;gallery-index&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>新建 &#x2F;source&#x2F;gallery&#x2F;index.md，输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line">&lt;div class=&quot;ImageGrid&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>新建 &#x2F;source&#x2F;galleries&#x2F;index.md，输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 光影流年</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line">&lt;div id=&quot;galleryIntro&quot; class=&quot;gallery-intro&quot;&gt;“ 这里有光影流年，还把喜欢装进云朵，相拥在明天的河岸。 ”&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;galleryIndex&quot; class=&quot;gallery-index&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2-处理图片信息"><a href="#2-处理图片信息" class="headerlink" title="2.处理图片信息"></a>2.处理图片信息</h2><p>这里需要创建自己的github相册，创建一个gallery项目，建一个gallery的文件夹，在这个文件夹里就可以放你想要的照片了。PS：可以放文件夹，一个文件夹就在你的博客中显示的是一个照片集。</p><p>这里主要是为了加快图片的加载速度, 利用GitHub +jsDelivr的方式。</p><blockquote><p>把这个项目clone到本地，下面的操作是对这个项目进行的。</p></blockquote><p>这里没有安装 image-size，需要npm安装下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -S image-size</span><br></pre></td></tr></table></figure><p>在github相册目录下，执行createjs，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node createjs.js </span><br></pre></td></tr></table></figure><p>createjs.js 脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs-extra&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">// 兼容各种导出形式：function / &#123; imageSize &#125; / &#123; default &#125;</span><br><span class="line">const imgMod = require(&#x27;image-size&#x27;);</span><br><span class="line">const imageSize = typeof imgMod === &#x27;function&#x27; ? imgMod : (imgMod.imageSize || imgMod.default);</span><br><span class="line"></span><br><span class="line">const rootPath = &#x27;gallery&#x27;;   // 相册根目录（不用末尾斜杠）</span><br><span class="line"></span><br><span class="line">class PhotoExtension &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.size = 64;</span><br><span class="line">    this.offset = [0, 0];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Photo &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.dirName = &#x27;&#x27;;</span><br><span class="line">    this.fileName = &#x27;&#x27;;</span><br><span class="line">    this.iconID = &#x27;&#x27;;</span><br><span class="line">    this.extension = new PhotoExtension();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PhotoGroup &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.name = &#x27;&#x27;;</span><br><span class="line">    this.children = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const IMAGE_EXTS = new Set([&#x27;.png&#x27;, &#x27;.jpg&#x27;, &#x27;.jpeg&#x27;, &#x27;.gif&#x27;, &#x27;.webp&#x27;, &#x27;.bmp&#x27;, &#x27;.tiff&#x27;, &#x27;.svg&#x27;]);</span><br><span class="line"></span><br><span class="line">function createPlotIconsData() &#123;</span><br><span class="line">  let allPlots = [];</span><br><span class="line">  let allPlotGroups = [];</span><br><span class="line"></span><br><span class="line">  const plotJsonFile = path.join(__dirname, &#x27;photosInfo.json&#x27;);</span><br><span class="line">  const plotGroupJsonFile = path.join(__dirname, &#x27;photos.json&#x27;);</span><br><span class="line"></span><br><span class="line">  if (fs.existsSync(plotJsonFile)) &#123;</span><br><span class="line">    allPlots = JSON.parse(fs.readFileSync(plotJsonFile, &#x27;utf8&#x27;));</span><br><span class="line">  &#125;</span><br><span class="line">  if (fs.existsSync(plotGroupJsonFile)) &#123;</span><br><span class="line">    allPlotGroups = JSON.parse(fs.readFileSync(plotGroupJsonFile, &#x27;utf8&#x27;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 只遍历相册根目录</span><br><span class="line">  const rootDir = path.join(__dirname, rootPath);</span><br><span class="line">  if (!fs.existsSync(rootDir)) &#123;</span><br><span class="line">    console.error(`根目录不存在：$&#123;rootDir&#125;`);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.readdirSync(rootDir).forEach((dirName) =&gt; &#123;</span><br><span class="line">    const dirFull = path.join(rootDir, dirName);</span><br><span class="line">    if (!fs.statSync(dirFull).isDirectory()) return;</span><br><span class="line"></span><br><span class="line">    const subfiles = fs.readdirSync(dirFull);</span><br><span class="line">    subfiles.forEach((subfileName) =&gt; &#123;</span><br><span class="line">      const ext = path.extname(subfileName).toLowerCase();</span><br><span class="line">      if (!IMAGE_EXTS.has(ext)) return; // 只处理图片</span><br><span class="line"></span><br><span class="line">      // 如果已存在可跳过（按需打开）</span><br><span class="line">      if (allPlots.find(o =&gt; o.fileName === subfileName &amp;&amp; o.dirName === dirName)) return;</span><br><span class="line"></span><br><span class="line">      const imgPath = path.join(dirFull, subfileName);</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">        const info = imageSize(imgPath); // 这里已兼容函数获取</span><br><span class="line">        const plot = new Photo();</span><br><span class="line">        plot.dirName = dirName;</span><br><span class="line">        plot.fileName = subfileName;</span><br><span class="line">        plot.iconID = `$&#123;info.width&#125;.$&#123;info.height&#125; $&#123;subfileName&#125;`;</span><br><span class="line">        allPlots.push(plot);</span><br><span class="line"></span><br><span class="line">        let group = allPlotGroups.find(o =&gt; o.name === dirName);</span><br><span class="line">        if (!group) &#123;</span><br><span class="line">          group = new PhotoGroup();</span><br><span class="line">          group.name = dirName;</span><br><span class="line">          allPlotGroups.push(group);</span><br><span class="line">        &#125;</span><br><span class="line">        group.children.push(plot.iconID);</span><br><span class="line">        console.log(&#x27;✔ 新增图片：&#x27;, plot.iconID);</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        console.warn(&#x27;⚠ 读取图片尺寸失败：&#x27;, imgPath, e.message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  fs.writeJSONSync(plotJsonFile, allPlots, &#123; spaces: 2 &#125;);</span><br><span class="line">  fs.writeJSONSync(plotGroupJsonFile, allPlotGroups, &#123; spaces: 2 &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createPlotIconsData();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将生成的photos.json拷贝到博客目录下的photos</p><h2 id="3-加载-js和css文件"><a href="#3-加载-js和css文件" class="headerlink" title="3.加载 js和css文件"></a>3.加载 js和css文件</h2><p>在 &#x2F;source&#x2F;js&#x2F; 目录下创建 photoWall.js</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var imgDataPath = &quot;/photos/photos.json&quot;; // 先用站点内路径，稳定 200</span><br><span class="line">var imgPath     = &quot;https://cdn.jsdelivr.net/gh/wenjiew-astro/gallery@main/gallery/&quot;;</span><br><span class="line">var imgMaxNum   = 50;</span><br><span class="line"></span><br><span class="line">var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;</span><br><span class="line">var imageWidth  = windowWidth &lt; 768 ? 145 : 250;</span><br><span class="line"></span><br><span class="line">function slugify(s)&#123; return String(s).toLowerCase().replace(/\s+/g,&#x27;-&#x27;).replace(/[^\w\-]+/g,&#x27;&#x27;).replace(/\-+/g,&#x27;-&#x27;).replace(/^\-+|\-+$/g,&#x27;&#x27;)||&#x27;tab&#x27;; &#125;</span><br><span class="line">function enc(s)&#123; return encodeURIComponent(s); &#125;</span><br><span class="line">function buildImgURL(dir,file)&#123; return imgPath + enc(dir) + &#x27;/&#x27; + enc(file); &#125;</span><br><span class="line"></span><br><span class="line">// 可选：为分组定义“中文/英文标题”这类别名；找不到就用 name 填充</span><br><span class="line">const groupMeta = &#123;</span><br><span class="line">  // &#x27;凤凰古城&#x27;: &#123; title:&#x27;Fenghuang&#x27;, sub:&#x27;凤凰古城&#x27; &#125;,</span><br><span class="line">  // &#x27;西湖&#x27;:     &#123; title:&#x27;West Lake&#x27;, sub:&#x27;西湖&#x27; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const photo = &#123;</span><br><span class="line">  offset: imgMaxNum,</span><br><span class="line"></span><br><span class="line">  init()&#123;</span><br><span class="line">    if (typeof jQuery===&#x27;undefined&#x27;)&#123; console.error(&#x27;[photoWall] jQuery 未加载&#x27;); return; &#125;</span><br><span class="line">    $.getJSON(imgDataPath,(data)=&gt;&#123;</span><br><span class="line">      if(!Array.isArray(data)||!data.length)&#123;</span><br><span class="line">        $(&#x27;.ImageGrid&#x27;).html(&#x27;&lt;div style=&quot;padding:1rem;color:#999;&quot;&gt;没有可显示的相册数据&lt;/div&gt;&#x27;); return;</span><br><span class="line">      &#125;</span><br><span class="line">      this.renderIndex(data);      // 上方分组封面区（像示例页）</span><br><span class="line">      this.renderGroups(data);     // 下方分组内容（瀑布流）</span><br><span class="line">      this.bindEvents();</span><br><span class="line">    &#125;).fail((_,s,e)=&gt;&#123;</span><br><span class="line">      console.error(&#x27;[photoWall] 加载 photos.json 失败：&#x27;,s,e);</span><br><span class="line">      $(&#x27;.ImageGrid&#x27;).html(&#x27;&lt;div style=&quot;padding:1rem;color:#c00;&quot;&gt;加载 photos.json 失败&lt;/div&gt;&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  renderIndex(data)&#123;</span><br><span class="line">    let html=&#x27;&#x27;;</span><br><span class="line">    data.forEach((g,idx)=&gt;&#123;</span><br><span class="line">      const &#123;name=&#x27;&#x27;,children=[]&#125;=g||&#123;&#125;;</span><br><span class="line">      const first=children[0];</span><br><span class="line">      const cover = first ? buildImgURL(name, String(first).split(&#x27; &#x27;)[1])</span><br><span class="line">                          : &#x27;https://via.placeholder.com/400x240?text=No+Image&#x27;;</span><br><span class="line">      const meta  = groupMeta[name] || &#123; title:name, sub:name &#125;;</span><br><span class="line">      const tiltClass = &#x27;tilt-&#x27; + (1 + Math.floor(Math.random()*6));</span><br><span class="line">      html += `</span><br><span class="line">        &lt;div class=&quot;gcard $&#123;tiltClass&#125;&quot; data-target=&quot;#$&#123;slugify(name)&#125;-$&#123;idx&#125;&quot; data-group=&quot;$&#123;enc(name)&#125;&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;gimg&quot;&gt;&lt;img src=&quot;$&#123;cover&#125;&quot; alt=&quot;$&#123;meta.title&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;gmeta&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;gtitle&quot;&gt;$&#123;meta.title&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;gsub&quot;&gt;$&#123;meta.sub&#125;（$&#123;children.length&#125;）&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;`;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&#x27;#galleryIndex&#x27;).html(html);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  renderGroups(data)&#123;</span><br><span class="line">    let liHtml=&#x27;&#x27;, panesHtml=&#x27;&#x27;;</span><br><span class="line">    data.forEach((group,idx)=&gt;&#123;</span><br><span class="line">      const &#123;name=&#x27;&#x27;,children=[]&#125;=group||&#123;&#125;;</span><br><span class="line">      const active = idx===0 ? &#x27;active&#x27; : &#x27;&#x27;;</span><br><span class="line">      const slug   = `$&#123;slugify(name)&#125;-$&#123;idx&#125;`;</span><br><span class="line"></span><br><span class="line">      // tabs（已被 CSS 隐藏，仅用于内部切分容器）</span><br><span class="line">      liHtml += `</span><br><span class="line">        &lt;li class=&quot;nav-item&quot; role=&quot;presentation&quot;&gt;</span><br><span class="line">          &lt;a class=&quot;nav-link $&#123;active&#125; photo-tab&quot; data-toggle=&quot;tab&quot;</span><br><span class="line">             href=&quot;#$&#123;slug&#125;&quot; role=&quot;tab&quot; aria-controls=&quot;$&#123;slug&#125;&quot; aria-selected=&quot;$&#123;idx===0&#125;&quot;&gt;</span><br><span class="line">             $&#123;name&#125;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;`;</span><br><span class="line"></span><br><span class="line">      // 分组里的图片卡片</span><br><span class="line">      let cards=&#x27;&#x27;;</span><br><span class="line">      children.slice(0,this.offset).forEach((item)=&gt;&#123;</span><br><span class="line">        const [size,file]=String(item).split(&#x27; &#x27;);</span><br><span class="line">        if(!size||!file) return;</span><br><span class="line">        const [w,h]=size.split(&#x27;.&#x27;);</span><br><span class="line">        const url=buildImgURL(name,file);</span><br><span class="line">        const imgName=file.split(&#x27;.&#x27;)[0];</span><br><span class="line"></span><br><span class="line">        cards += `</span><br><span class="line">          &lt;div class=&quot;card&quot; style=&quot;width:$&#123;imageWidth&#125;px&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;ImageInCard&quot; style=&quot;height:$&#123;(imageWidth*(+h||1))/(+w||1)&#125;px&quot;&gt;</span><br><span class="line">              &lt;a data-fancybox=&quot;gallery&quot; href=&quot;$&#123;url&#125;&quot; data-caption=&quot;$&#123;imgName&#125;&quot; title=&quot;$&#123;imgName&#125;&quot;&gt;</span><br><span class="line">                &lt;img loading=&quot;lazy&quot; src=&quot;$&#123;url&#125;&quot; width=&quot;$&#123;imageWidth&#125;&quot; /&gt;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;`;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      panesHtml += `</span><br><span class="line">        &lt;div class=&quot;tab-pane fade $&#123;active?&#x27;show active&#x27;:&#x27;&#x27;&#125;&quot; id=&quot;$&#123;slug&#125;&quot; role=&quot;tabpanel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;ImageGrid&quot;&gt;$&#123;cards&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;`;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    const tabs = `&lt;ul class=&quot;nav nav-tabs&quot; id=&quot;myTab&quot; role=&quot;tablist&quot;&gt;$&#123;liHtml&#125;&lt;/ul&gt;`;</span><br><span class="line">    const content = `&lt;div class=&quot;tab-content&quot; id=&quot;myTabContent&quot;&gt;$&#123;panesHtml&#125;&lt;/div&gt;`;</span><br><span class="line">    $(&#x27;#imageTab&#x27;).html(tabs);</span><br><span class="line">    $(&#x27;.ImageGrid&#x27;).not(&#x27;#myTabContent .ImageGrid&#x27;).remove();</span><br><span class="line">    $(&#x27;#myTab&#x27;).after(content);</span><br><span class="line"></span><br><span class="line">    this.mountGrids();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bindEvents()&#123;</span><br><span class="line">    // 点击封面卡片 → 切换到对应分组</span><br><span class="line">    $(document).on(&#x27;click&#x27;,&#x27;.gcard&#x27;,(e)=&gt;&#123;</span><br><span class="line">      const target=$(e.currentTarget).data(&#x27;target&#x27;);</span><br><span class="line">      if(target)&#123; $(`a[href=&#x27;$&#123;target&#125;&#x27;]`).tab(&#x27;show&#x27;); $(&#x27;html,body&#x27;).animate(&#123;scrollTop: $(&#x27;#imageTab&#x27;).offset().top-16&#125;, 280); &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    // Tab 切换/窗口尺寸更改 → 重新布局</span><br><span class="line">    $(document).on(&#x27;shown.bs.tab&#x27;,&#x27;a[data-toggle=&quot;tab&quot;]&#x27;,()=&gt;this.mountGrids());</span><br><span class="line">    $(window).on(&#x27;resize&#x27;,()=&gt;this.mountGrids());</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mountGrids()&#123;</span><br><span class="line">    $(&quot;.tab-pane.show.active .ImageGrid, .tab-pane.active .ImageGrid&quot;).each(function()&#123;</span><br><span class="line">      try&#123;</span><br><span class="line">        var grid=new Minigrid(&#123; container:this, item:&quot;.card&quot;, gutter:12 &#125;);</span><br><span class="line">        grid.mount();</span><br><span class="line">        const imgs=$(this).find(&#x27;img&#x27;); let left=imgs.length;</span><br><span class="line">        if(!left) return;</span><br><span class="line">        imgs.off(&#x27;load.pw error.pw&#x27;).on(&#x27;load.pw error.pw&#x27;,()=&gt;&#123; if(--left&lt;=0) grid.mount(); &#125;);</span><br><span class="line">      &#125;catch(e)&#123; console.warn(&#x27;[photoWall] Minigrid 失败：&#x27;,e.message); &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(function()&#123; photo.init(); &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 &#x2F;source&#x2F;js&#x2F; 目录下创建 gallery-group.js</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;gallery-group.js loaded&#x27;);</span><br><span class="line"></span><br><span class="line">var IMG_DATA = &quot;/photos/photos.json&quot;;</span><br><span class="line">var IMG_ROOT = &quot;https://cdn.jsdelivr.net/gh/wenjiew-astro/gallery@main/gallery/&quot;;</span><br><span class="line">var W = (window.innerWidth || document.documentElement.clientWidth) &lt; 768 ? 145 : 250;</span><br><span class="line"></span><br><span class="line">function enc(s)&#123; return encodeURIComponent(s) &#125;</span><br><span class="line">function build(dir, file)&#123; return IMG_ROOT + enc(dir) + &#x27;/&#x27; + enc(file) &#125;</span><br><span class="line">function q(k)&#123; return new URLSearchParams(location.search).get(k) || &#x27;&#x27; &#125;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line">  var $grid = $(&quot;.ImageGrid&quot;);</span><br><span class="line">  if (!$grid.length) return;</span><br><span class="line"></span><br><span class="line">  $.getJSON(IMG_DATA).done(function(list)&#123;</span><br><span class="line">    if (!Array.isArray(list) || !list.length) &#123; </span><br><span class="line">      $grid.html(&#x27;&lt;p style=&quot;color:#999&quot;&gt;暂无相册&lt;/p&gt;&#x27;); </span><br><span class="line">      return; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 取参数；没有则默认第一组（但只有在确实没带参数时才兜底）</span><br><span class="line">    var group = q(&#x27;group&#x27;);</span><br><span class="line">    if (!group) &#123;</span><br><span class="line">      group = list[0].name;</span><br><span class="line">      history.replaceState(null, &#x27;&#x27;, &#x27;?group=&#x27; + encodeURIComponent(group));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 兼容中文参数：URLSearchParams 已解码，这里不再反复解码</span><br><span class="line">    var item = list.find(function(x)&#123; return x &amp;&amp; x.name === group; &#125;);</span><br><span class="line">    if (!item) &#123; </span><br><span class="line">      $grid.html(&#x27;&lt;p style=&quot;color:#c00&quot;&gt;未找到分组：&#x27;+ group +&#x27;&lt;/p&gt;&#x27;); </span><br><span class="line">      return; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 找到分组后（item 存在）——把页头标题改成组名，并锁定</span><br><span class="line">    (function forceSiteTitle(name) &#123;</span><br><span class="line">      // 1) 浏览器标签</span><br><span class="line">      document.title = name + &#x27; - 相册&#x27;;</span><br><span class="line"></span><br><span class="line">      // 2) 页头大标题 #site-title</span><br><span class="line">      var el = document.querySelector(&#x27;#page-site-info #site-title&#x27;);</span><br><span class="line">      if (!el) return;</span><br><span class="line"></span><br><span class="line">      // 重复多次以覆盖主题的晚注入</span><br><span class="line">      function apply() &#123; el.textContent = name; &#125;</span><br><span class="line">      [0, 30, 80, 200, 500, 1000, 2000].forEach(function(t)&#123; setTimeout(apply, t); &#125;);</span><br><span class="line"></span><br><span class="line">      // 监听这个节点，一旦被改回就再写一次</span><br><span class="line">      try &#123;</span><br><span class="line">        var mo = new MutationObserver(function()&#123; if (el.textContent !== name) el.textContent = name; &#125;);</span><br><span class="line">        mo.observe(el, &#123; childList: true, characterData: true, subtree: true &#125;);</span><br><span class="line">        setTimeout(function()&#123; mo.disconnect(); &#125;, 8000); // 8 秒后基本稳定</span><br><span class="line">      &#125; catch(e)&#123;&#125;</span><br><span class="line">    &#125;)(group);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $(&#x27;#groupTitle&#x27;).text(group);</span><br><span class="line"></span><br><span class="line">    var cards = item.children.map(function(s)&#123;</span><br><span class="line">      var seg = String(s).split(&#x27; &#x27;); if (seg.length &lt; 2) return &#x27;&#x27;;</span><br><span class="line">      var wh = seg[0].split(&#x27;.&#x27;); var iw = +wh[0]||1, ih = +wh[1]||1;</span><br><span class="line">      var file = seg[1]; var url = build(group, file); var name = file.split(&#x27;.&#x27;)[0];</span><br><span class="line"></span><br><span class="line">      return &#x27;&#x27; +</span><br><span class="line">        &#x27;&lt;div class=&quot;card&quot; style=&quot;width:&#x27;+W+&#x27;px&quot;&gt;&#x27; +</span><br><span class="line">          &#x27;&lt;div class=&quot;ImageInCard&quot; style=&quot;height:&#x27;+(W*ih/iw)+&#x27;px&quot;&gt;&#x27; +</span><br><span class="line">            &#x27;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;&#x27;+url+&#x27;&quot; data-caption=&quot;&#x27;+name+&#x27;&quot; title=&quot;&#x27;+name+&#x27;&quot;&gt;&#x27; +</span><br><span class="line">              &#x27;&lt;img loading=&quot;lazy&quot; src=&quot;&#x27;+url+&#x27;&quot; width=&quot;&#x27;+W+&#x27;&quot;/&gt;&#x27; +</span><br><span class="line">            &#x27;&lt;/a&gt;&#x27; +</span><br><span class="line">          &#x27;&lt;/div&gt;&#x27; +</span><br><span class="line">        &#x27;&lt;/div&gt;&#x27;;</span><br><span class="line">    &#125;).join(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">    $grid.html(cards);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">      var grid = new Minigrid(&#123; container: $grid[0], item: &#x27;.card&#x27;, gutter: 12 &#125;);</span><br><span class="line">      grid.mount();</span><br><span class="line">      var imgs = $grid.find(&#x27;img&#x27;), left = imgs.length;</span><br><span class="line">      imgs.on(&#x27;load error&#x27;, function()&#123; if(--left &lt;= 0) grid.mount(); &#125;);</span><br><span class="line">      $(window).on(&#x27;resize&#x27;, function()&#123; grid.mount(); &#125;);</span><br><span class="line">    &#125; catch(e) &#123; console.warn(&#x27;Minigrid error:&#x27;, e.message); &#125;</span><br><span class="line">  &#125;).fail(function(_,s,e)&#123;</span><br><span class="line">    $grid.html(&#x27;&lt;p style=&quot;color:#c00&quot;&gt;photos.json 加载失败&lt;/p&gt;&#x27;);</span><br><span class="line">    console.error(&#x27;[gallery-group] photos.json 加载失败：&#x27;, s, e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">document.addEventListener(&#x27;pjax:complete&#x27;, function () &#123;</span><br><span class="line">  var g = new URLSearchParams(location.search).get(&#x27;group&#x27;);</span><br><span class="line">  if (g) (function(name)&#123;</span><br><span class="line">    var el = document.querySelector(&#x27;#page-site-info #site-title&#x27;);</span><br><span class="line">    if (el) el.textContent = name;</span><br><span class="line">    document.title = name + &#x27; - 相册&#x27;;</span><br><span class="line">  &#125;)(g);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 &#x2F;source&#x2F;js&#x2F; 目录下创建 gallery-index.js</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;gallery-index.js loaded&#x27;);</span><br><span class="line"></span><br><span class="line">// 数据与图片前缀</span><br><span class="line">var IMG_DATA = &quot;/photos/photos.json&quot;;  // 请确保 source/photos/photos.json 存在并会部署</span><br><span class="line">var IMG_ROOT = &quot;https://cdn.jsdelivr.net/gh/wenjiew-astro/gallery@main/gallery/&quot;;</span><br><span class="line"></span><br><span class="line">// 从封面页渲染“可点击的封面卡片”，卡片本身就是 &lt;a href=&quot;../gallery/?group=xxx&quot;&gt;</span><br><span class="line">function enc(s)&#123; return encodeURIComponent(s) &#125;</span><br><span class="line">function build(dir, file)&#123; return IMG_ROOT + enc(dir) + &#x27;/&#x27; + enc(file) &#125;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line">  var $index = $(&quot;#galleryIndex&quot;);</span><br><span class="line">  if (!$index.length) return;</span><br><span class="line"></span><br><span class="line">  $.getJSON(IMG_DATA).done(function(list)&#123;</span><br><span class="line">    if (!Array.isArray(list) || !list.length) &#123;</span><br><span class="line">      $index.html(&#x27;&lt;p style=&quot;color:#999&quot;&gt;暂无相册&lt;/p&gt;&#x27;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var html = list.map(function(g)&#123;</span><br><span class="line">      var name  = g.name || &#x27;&#x27;;</span><br><span class="line">      var first = (g.children &amp;&amp; g.children[0]) ? String(g.children[0]).split(&#x27; &#x27;)[1] : null;</span><br><span class="line">      var cover = first ? build(name, first) : &#x27;https://via.placeholder.com/400x240?text=No+Image&#x27;;</span><br><span class="line">      var tilt  = &#x27;tilt-&#x27; + (1 + Math.floor(Math.random()*6));</span><br><span class="line"></span><br><span class="line">      // ★ 用相对路径 ../gallery/，从 /galleries/ 跳到 /gallery/，任何根路径都成立</span><br><span class="line">      return &#x27;&#x27; +</span><br><span class="line">        &#x27;&lt;a class=&quot;gcard &#x27;+tilt+&#x27;&quot; href=&quot;../gallery/?group=&#x27;+ enc(name) +&#x27;&quot;&gt;&#x27; +</span><br><span class="line">          &#x27;&lt;div class=&quot;gimg&quot;&gt;&lt;img src=&quot;&#x27;+cover+&#x27;&quot; alt=&quot;&#x27;+name+&#x27;&quot;&gt;&lt;/div&gt;&#x27; +</span><br><span class="line">          &#x27;&lt;div class=&quot;gmeta&quot;&gt;&lt;div class=&quot;gtitle&quot;&gt;&#x27;+name+&#x27;&lt;/div&gt;&#x27; +</span><br><span class="line">          &#x27;&lt;div class=&quot;gsub&quot;&gt;共 &#x27;+(g.children?g.children.length:0)+&#x27; 张&lt;/div&gt;&lt;/div&gt;&#x27; +</span><br><span class="line">        &#x27;&lt;/a&gt;&#x27;;</span><br><span class="line">    &#125;).join(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">    $index.html(html);</span><br><span class="line">  &#125;).fail(function(_,s,e)&#123;</span><br><span class="line">    console.error(&#x27;[gallery-index] photos.json 加载失败：&#x27;, s, e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用 Butterfly 的 <code>inject</code> 注入配置文件</p><p>打开 <code>themes/butterfly/_config.yml</code>，增加（或合并到你自己的 inject）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">   # 相册页需要的东西</span><br><span class="line">    - &#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/bootstrap/4.6.2/css/bootstrap.min.css&quot;&gt;&#x27;</span><br><span class="line">    - &#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/fancybox/3.5.7/jquery.fancybox.min.css&quot;&gt;&#x27;</span><br><span class="line">    - |</span><br><span class="line">      &lt;style&gt;</span><br><span class="line">        .gallery-index, .ImageGrid &#123; width: min(1200px, calc(100% - 32px)); margin: 12px auto 24px; &#125;</span><br><span class="line">        .post-block:has(#galleryIndex)&#123; background:transparent!important; box-shadow:none!important; padding:0!important; &#125;</span><br><span class="line">        .post-title:has(+ .post-content #galleryIndex),</span><br><span class="line">        .post-meta:has(+ .post-content #galleryIndex),</span><br><span class="line">        .post-content:has(#galleryIndex) &gt; *:not(#galleryIntro):not(#galleryIndex)&#123; display:none!important; &#125;</span><br><span class="line"></span><br><span class="line">        /* 引言容器样式（放大 + 增距 + 现代卡片效果） */</span><br><span class="line">        .gallery-intro &#123;</span><br><span class="line">          /* 尺寸更大 */</span><br><span class="line">          width: min(2000px, calc(100% - 1px));</span><br><span class="line">          margin: -80px auto 44px;          /* ↑ 上 28px，↓ 下 44px：与下面内容拉开距离 */</span><br><span class="line">          padding: 22px 28px;</span><br><span class="line"></span><br><span class="line">          /* 排版与可读性 */</span><br><span class="line">          text-align: center;</span><br><span class="line">          font-size: 16px;                  /* 整体字更大 */</span><br><span class="line">          line-height: 1.9;</span><br><span class="line"></span><br><span class="line">          /* 背景与毛玻璃 */</span><br><span class="line">          background: rgb(166, 169, 175);</span><br><span class="line">          backdrop-filter: blur(6px);</span><br><span class="line">          -webkit-backdrop-filter: blur(6px);</span><br><span class="line"></span><br><span class="line">          /* 形状与投影 */</span><br><span class="line">          border-radius: 16px;</span><br><span class="line">          box-shadow: 0 10px 30px rgba(0,0,0,0.18);</span><br><span class="line"></span><br><span class="line">          /* 悬停动效（轻微上浮 + 放大） */</span><br><span class="line">          transform: translateY(0) scale(1);</span><br><span class="line">          transition: transform .25s ease, box-shadow .25s ease, filter .25s ease;</span><br><span class="line">          will-change: transform;</span><br><span class="line"></span><br><span class="line">          position: relative;               /* 供 ::before 定位用 */</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .gallery-intro:hover &#123;</span><br><span class="line">          transform: translateY(-4px) scale(1.02);</span><br><span class="line">          box-shadow: 0 16px 40px rgba(0,0,0,0.24);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 渐变边框（不遮住内容） */</span><br><span class="line">        .gallery-intro::before &#123;</span><br><span class="line">          content: &#x27;&#x27;;</span><br><span class="line">          position: absolute;</span><br><span class="line">          inset: 0;</span><br><span class="line">          padding: 2px;                     /* 边框粗细 */</span><br><span class="line">          border-radius: inherit;</span><br><span class="line">          background: linear-gradient(135deg, #4facfe, #00f2fe, #f093fb, #f5576c);</span><br><span class="line"></span><br><span class="line">          /* 用蒙版把中间“挖空”，只显示边框 */</span><br><span class="line">          -webkit-mask: </span><br><span class="line">            linear-gradient(#000 0 0) content-box, </span><br><span class="line">            linear-gradient(#000 0 0);</span><br><span class="line">          -webkit-mask-composite: xor;</span><br><span class="line">                  mask-composite: exclude;</span><br><span class="line"></span><br><span class="line">          pointer-events: none;</span><br><span class="line">          z-index: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        .gallery-index&#123; display:grid; grid-template-columns:repeat(auto-fill,minmax(240px,1fr)); gap:22px; &#125;</span><br><span class="line">        .gcard&#123; width:240px; cursor:pointer; user-select:none; transform-origin:50% 80%;</span><br><span class="line">                transition:transform .25s ease, filter .25s ease; filter:drop-shadow(0 10px 20px rgba(0,0,0,.18)); text-decoration:none; &#125;</span><br><span class="line">        .gcard:hover&#123; transform:rotate(0deg) translateY(-6px) scale(1.02); filter:drop-shadow(0 14px 28px rgba(0,0,0,.22)); &#125;</span><br><span class="line">        .gimg&#123; width:100%; height:150px; border-radius:12px; overflow:hidden; background:#111; &#125;</span><br><span class="line">        .gimg img&#123; width:100%; height:100%; object-fit:cover; display:block; &#125;</span><br><span class="line">        .gmeta&#123; text-align:center; margin-top:8px; line-height:1.25; color:inherit; &#125;</span><br><span class="line">        .gtitle&#123; font-weight:700; &#125;</span><br><span class="line">        .gsub&#123; font-size:12px; opacity:.75; margin-top:4px; &#125;</span><br><span class="line">        .tilt-1&#123; transform:rotate(-4deg) &#125; .tilt-2&#123; transform:rotate(-2.5deg) &#125;</span><br><span class="line">        .tilt-3&#123; transform:rotate(-1.5deg) &#125; .tilt-4&#123; transform:rotate(1.5deg) &#125;</span><br><span class="line">        .tilt-5&#123; transform:rotate(2.5deg) &#125;  .tilt-6&#123; transform:rotate(4deg) &#125;</span><br><span class="line"></span><br><span class="line">        .card&#123; border-radius:14px; overflow:hidden; box-shadow:0 6px 18px rgba(0,0,0,.08) &#125;</span><br><span class="line">        .ImageInCard&#123; overflow:hidden; border-radius:14px &#125;</span><br><span class="line">        .card img&#123; width:100%; height:100%; object-fit:cover; display:block &#125;</span><br><span class="line">        .gallery-title&#123; width:min(1200px, calc(100% - 32px)); margin:16px auto 8px; font-weight:700; font-size:20px; &#125;</span><br><span class="line">        /* 用伪元素显示我们设置的标题；把原文字隐藏掉 */</span><br><span class="line">        #page-header .dyn-title&#123; color: transparent !important; position: relative; &#125;</span><br><span class="line">        #page-header .dyn-title::after&#123;</span><br><span class="line">          content: attr(data-group);   /* 读取元素属性 data-group 作为标题 */</span><br><span class="line">          color: inherit;</span><br><span class="line">          position: absolute;</span><br><span class="line">          left: 0; top: 0;</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">    # 自定义样式</span><br><span class="line">    - &#x27;&lt;style&gt;</span><br><span class="line">        /* 让 nav 成为定位容器 */</span><br><span class="line">        #nav&#123;position:relative;&#125;</span><br><span class="line"></span><br><span class="line">        /* 方案 A：适配大多数版本的菜单容器 */</span><br><span class="line">        #nav .menus_items&#123;</span><br><span class="line">          position:absolute;</span><br><span class="line">          left:50%;</span><br><span class="line">          top:20%;</span><br><span class="line">          transform:translateX(-50%);</span><br><span class="line">          display:flex;</span><br><span class="line">          gap:.1rem;</span><br><span class="line">          white-space:nowrap;</span><br><span class="line">          /* 避免被右侧按钮挤压 */</span><br><span class="line">          max-width:calc(100% - 240px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 方案 B：部分版本菜单容器是 .menus */</span><br><span class="line">        #nav .menus&#123;</span><br><span class="line">          display:flex !important;</span><br><span class="line">          justify-content:center !important;</span><br><span class="line">          width:100% !important;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 保留左右两侧布局（logo 左、右侧按钮在右） */</span><br><span class="line">        #nav .site-brand, #nav .brand, #nav .site-title&#123;</span><br><span class="line">          position:relative; z-index:2;</span><br><span class="line">        &#125;</span><br><span class="line">        #nav .right, #nav .right-menu&#123;</span><br><span class="line">          position:relative; z-index:2;</span><br><span class="line">          margin-left:auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 菜单项间距（可调） */</span><br><span class="line">        #nav .menus_items&gt;li, #nav .menus&gt;li&#123;</span><br><span class="line">          margin:0 .5rem;</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/style&gt;&#x27;</span><br><span class="line">  bottom:</span><br><span class="line">    # 相册页需要的东西</span><br><span class="line">    - &#x27;&lt;script src=&quot;https://cdn.staticfile.org/jquery/3.6.4/jquery.min.js&quot;&gt;&lt;/script&gt;&#x27;</span><br><span class="line">    - &#x27;&lt;script src=&quot;https://cdn.staticfile.org/bootstrap/4.6.2/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#x27;</span><br><span class="line">    - &#x27;&lt;script src=&quot;https://gcore.jsdelivr.net/npm/minigrid@3.1.1/dist/minigrid.min.js&quot;&gt;&lt;/script&gt;&#x27;</span><br><span class="line">    - &#x27;&lt;script src=&quot;https://cdn.staticfile.org/fancybox/3.5.7/jquery.fancybox.min.js&quot;&gt;&lt;/script&gt;&#x27;</span><br><span class="line">    - &#x27;&lt;script defer src=&quot;/js/gallery-index.js&quot;&gt;&lt;/script&gt;&#x27;</span><br><span class="line">    - &#x27;&lt;script defer src=&quot;/js/gallery-group.js&quot;&gt;&lt;/script&gt;&#x27;</span><br></pre></td></tr></table></figure><p>最后 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，本地部署看看效果。</p><h2 id="如果你的相册中图片比较大的话我写了一个程序来处理"><a href="#如果你的相册中图片比较大的话我写了一个程序来处理" class="headerlink" title="如果你的相册中图片比较大的话我写了一个程序来处理"></a>如果你的相册中图片比较大的话我写了一个程序来处理</h2><p>新建一个compress_gallery.py</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"># python compress_gallery.py --src .\gallery --dst .\gallery_5MB</span><br><span class="line"># python compress_gallery.py --src .\gallery --dst .\gallery_5MB --limit 5</span><br><span class="line"># python compress_gallery.py --src .\gallery --dst .\gallery_10MB --limit 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import os, sys, io, shutil, argparse</span><br><span class="line">from pathlib import Path</span><br><span class="line">from PIL import Image, ImageOps</span><br><span class="line"></span><br><span class="line"># 可选支持 HEIC/HEIF</span><br><span class="line">try:</span><br><span class="line">    from pillow_heif import register_heif_opener  # type: ignore</span><br><span class="line">    register_heif_opener()</span><br><span class="line">except Exception:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">IMAGE_EXTS = &#123;&quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.png&quot;, &quot;.tif&quot;, &quot;.tiff&quot;, &quot;.bmp&quot;, &quot;.webp&quot;, &quot;.heic&quot;, &quot;.heif&quot;&#125;</span><br><span class="line"></span><br><span class="line">def is_image_file(p: Path) -&gt; bool:</span><br><span class="line">    return p.suffix.lower() in IMAGE_EXTS</span><br><span class="line"></span><br><span class="line">def ensure_dir(p: Path):</span><br><span class="line">    p.parent.mkdir(parents=True, exist_ok=True)</span><br><span class="line"></span><br><span class="line">def normalize_orientation(img: Image.Image, strategy: str = &quot;auto&quot;) -&gt; tuple[Image.Image, bytes | None]:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回 (像素已标准化的图像, EXIF字节或None)。写回的EXIF已将 Orientation(274)=1。</span><br><span class="line">    strategy: &quot;auto&quot; | &quot;force&quot; | &quot;strip&quot;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        exif = img.getexif()</span><br><span class="line">    except Exception:</span><br><span class="line">        exif = None</span><br><span class="line"></span><br><span class="line">    ori = 1</span><br><span class="line">    if exif and len(exif):</span><br><span class="line">        ori = exif.get(274, 1)</span><br><span class="line"></span><br><span class="line">    if strategy == &quot;strip&quot;:</span><br><span class="line">        if exif:</span><br><span class="line">            exif[274] = 1</span><br><span class="line">            return img, exif.tobytes()</span><br><span class="line">        return img, None</span><br><span class="line"></span><br><span class="line">    if strategy == &quot;force&quot;:</span><br><span class="line">        base = ImageOps.exif_transpose(img)</span><br><span class="line">        if exif:</span><br><span class="line">            exif[274] = 1</span><br><span class="line">            return base, exif.tobytes()</span><br><span class="line">        return base, None</span><br><span class="line"></span><br><span class="line">    # strategy == &quot;auto&quot;</span><br><span class="line">    w, h = img.size</span><br><span class="line">    need_rotate = False</span><br><span class="line">    if ori in (3, 4):         # 180°</span><br><span class="line">        need_rotate = True</span><br><span class="line">    elif ori in (5, 6, 7, 8): # 90°/270°</span><br><span class="line">        need_rotate = (w &gt;= h)  # 横图才旋转；已是竖图则不旋</span><br><span class="line"></span><br><span class="line">    base = ImageOps.exif_transpose(img) if need_rotate else img</span><br><span class="line">    if exif:</span><br><span class="line">        exif[274] = 1</span><br><span class="line">        return base, exif.tobytes()</span><br><span class="line">    return base, None</span><br><span class="line"></span><br><span class="line">def save_jpeg_under_limit(img: Image.Image,</span><br><span class="line">                          limit_bytes: int,</span><br><span class="line">                          exif_bytes: bytes | None,</span><br><span class="line">                          icc: bytes | None,</span><br><span class="line">                          min_side: int = 800,</span><br><span class="line">                          quality_steps = (92, 85, 80, 72, 65, 60, 50)) -&gt; bytes:</span><br><span class="line">    &quot;&quot;&quot;逐步降质，必要时等比缩放，直到 &lt;= limit_bytes。此时 img 已完成方向归一化。&quot;&quot;&quot;</span><br><span class="line">    base = img</span><br><span class="line">    if base.mode not in (&quot;RGB&quot;, &quot;L&quot;):</span><br><span class="line">        base = base.convert(&quot;RGB&quot;)</span><br><span class="line"></span><br><span class="line">    w, h = base.size</span><br><span class="line">    scale = 1.0</span><br><span class="line">    last_data = None</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        work = base if scale == 1.0 else base.resize((max(1,int(w*scale)), max(1,int(h*scale))), Image.LANCZOS)</span><br><span class="line"></span><br><span class="line">        for q in quality_steps:</span><br><span class="line">            buf = io.BytesIO()</span><br><span class="line">            save_kwargs = dict(format=&quot;JPEG&quot;, quality=q, optimize=True, progressive=True, subsampling=&quot;4:2:0&quot;)</span><br><span class="line">            if exif_bytes: save_kwargs[&quot;exif&quot;] = exif_bytes</span><br><span class="line">            if icc:        save_kwargs[&quot;icc_profile&quot;] = icc</span><br><span class="line">            work.save(buf, **save_kwargs)</span><br><span class="line">            data = buf.getvalue()</span><br><span class="line">            last_data = data</span><br><span class="line">            if len(data) &lt;= limit_bytes:</span><br><span class="line">                return data</span><br><span class="line"></span><br><span class="line">        if min(work.size) &lt;= min_side:</span><br><span class="line">            return last_data</span><br><span class="line">        scale *= 0.85</span><br><span class="line"></span><br><span class="line">def save_webp_under_limit(img: Image.Image,</span><br><span class="line">                          limit_bytes: int,</span><br><span class="line">                          exif_bytes: bytes | None,</span><br><span class="line">                          icc: bytes | None,</span><br><span class="line">                          min_side: int = 800,</span><br><span class="line">                          quality_steps = (95, 90, 85, 80, 75, 70, 65, 60)) -&gt; bytes:</span><br><span class="line">    &quot;&quot;&quot;保存为 WebP（可带透明），逐步降质与缩放至 &lt;= limit_bytes。此时 img 已完成方向归一化。&quot;&quot;&quot;</span><br><span class="line">    base = img</span><br><span class="line">    has_alpha = (base.mode in (&quot;RGBA&quot;, &quot;LA&quot;)) or (base.mode == &quot;P&quot; and &quot;transparency&quot; in base.info)</span><br><span class="line">    if has_alpha:</span><br><span class="line">        if base.mode != &quot;RGBA&quot;:</span><br><span class="line">            base = base.convert(&quot;RGBA&quot;)</span><br><span class="line">    else:</span><br><span class="line">        if base.mode not in (&quot;RGB&quot;, &quot;L&quot;):</span><br><span class="line">            base = base.convert(&quot;RGB&quot;)</span><br><span class="line"></span><br><span class="line">    w, h = base.size</span><br><span class="line">    scale = 1.0</span><br><span class="line">    last_data = None</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        work = base if scale == 1.0 else base.resize((max(1,int(w*scale)), max(1,int(h*scale))), Image.LANCZOS)</span><br><span class="line"></span><br><span class="line">        for q in quality_steps:</span><br><span class="line">            buf = io.BytesIO()</span><br><span class="line">            save_kwargs = dict(format=&quot;WEBP&quot;, quality=q, method=6)</span><br><span class="line">            if exif_bytes: save_kwargs[&quot;exif&quot;] = exif_bytes  # 某些查看器可能忽略 WebP EXIF，但我们仍写入</span><br><span class="line">            if icc:        save_kwargs[&quot;icc_profile&quot;] = icc</span><br><span class="line">            work.save(buf, **save_kwargs)</span><br><span class="line">            data = buf.getvalue()</span><br><span class="line">            last_data = data</span><br><span class="line">            if len(data) &lt;= limit_bytes:</span><br><span class="line">                return data</span><br><span class="line"></span><br><span class="line">        if min(work.size) &lt;= min_side:</span><br><span class="line">            return last_data</span><br><span class="line">        scale *= 0.85</span><br><span class="line"></span><br><span class="line">def compress_one(input_path: Path, output_path: Path, limit_bytes: int, min_side: int = 800, orient_strategy: str = &quot;auto&quot;) -&gt; tuple[bool, str]:</span><br><span class="line">    try:</span><br><span class="line">        if input_path.stat().st_size &lt;= limit_bytes:</span><br><span class="line">            ensure_dir(output_path)</span><br><span class="line">            shutil.copy2(input_path, output_path)</span><br><span class="line">            return True, f&quot;SKIP (&lt;= limit): &#123;input_path&#125;&quot;</span><br><span class="line"></span><br><span class="line">        with Image.open(input_path) as im:</span><br><span class="line">            base, exif_bytes = normalize_orientation(im, strategy=orient_strategy)</span><br><span class="line">            icc  = im.info.get(&quot;icc_profile&quot;, None)</span><br><span class="line">            ext = input_path.suffix.lower()</span><br><span class="line"></span><br><span class="line">            if ext == &quot;.png&quot;:</span><br><span class="line">                data = save_webp_under_limit(base, limit_bytes, exif_bytes, icc, min_side=min_side)</span><br><span class="line">                out = output_path.with_suffix(&quot;.webp&quot;)</span><br><span class="line">                ensure_dir(out)</span><br><span class="line">                with open(out, &quot;wb&quot;) as f:</span><br><span class="line">                    f.write(data)</span><br><span class="line">                return True, f&quot;PNG-&gt;WebP-&gt;OK: &#123;input_path&#125; -&gt; &#123;out.name&#125;&quot;</span><br><span class="line"></span><br><span class="line">            elif ext in (&quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.webp&quot;, &quot;.tif&quot;, &quot;.tiff&quot;, &quot;.bmp&quot;, &quot;.heic&quot;, &quot;.heif&quot;):</span><br><span class="line">                data = save_jpeg_under_limit(base, limit_bytes, exif_bytes, icc, min_side=min_side)</span><br><span class="line">                out = output_path.with_suffix(&quot;.jpg&quot;)</span><br><span class="line">                ensure_dir(out)</span><br><span class="line">                with open(out, &quot;wb&quot;) as f:</span><br><span class="line">                    f.write(data)</span><br><span class="line">                return True, f&quot;&#123;ext.upper().lstrip(&#x27;.&#x27;)&#125;-&gt;JPEG-&gt;OK: &#123;input_path&#125; -&gt; &#123;out.name&#125;&quot;</span><br><span class="line"></span><br><span class="line">            else:</span><br><span class="line">                data = save_jpeg_under_limit(base, limit_bytes, exif_bytes, icc, min_side=min_side)</span><br><span class="line">                out = output_path.with_suffix(&quot;.jpg&quot;)</span><br><span class="line">                ensure_dir(out)</span><br><span class="line">                with open(out, &quot;wb&quot;) as f:</span><br><span class="line">                    f.write(data)</span><br><span class="line">                return True, f&quot;OTHER-&gt;JPEG-&gt;OK: &#123;input_path&#125; -&gt; &#123;out.name&#125;&quot;</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        return False, f&quot;FAIL: &#123;input_path&#125; (&#123;e&#125;)&quot;</span><br><span class="line"></span><br><span class="line">def walk_and_compress(src: Path, dst: Path, limit_mb: float, min_side: int, orient_strategy: str):</span><br><span class="line">    limit_bytes = int(limit_mb * 1024 * 1024)</span><br><span class="line">    total = ok = fail = 0</span><br><span class="line">    for root, _, files in os.walk(src):</span><br><span class="line">        for name in files:</span><br><span class="line">            total += 1</span><br><span class="line">            in_path = Path(root) / name</span><br><span class="line">            rel = in_path.relative_to(src)</span><br><span class="line">            out_path = (dst / rel)</span><br><span class="line"></span><br><span class="line">            if not is_image_file(in_path):</span><br><span class="line">                try:</span><br><span class="line">                    ensure_dir(out_path)</span><br><span class="line">                    shutil.copy2(in_path, out_path)</span><br><span class="line">                    ok += 1</span><br><span class="line">                    print(f&quot;COPY (non-image): &#123;in_path&#125;&quot;)</span><br><span class="line">                except Exception as e:</span><br><span class="line">                    fail += 1</span><br><span class="line">                    print(f&quot;FAIL COPY: &#123;in_path&#125; (&#123;e&#125;)&quot;)</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            success, msg = compress_one(in_path, out_path, limit_bytes, min_side=min_side, orient_strategy=orient_strategy)</span><br><span class="line">            print(msg)</span><br><span class="line">            ok += int(success)</span><br><span class="line">            fail += int(not success)</span><br><span class="line"></span><br><span class="line">    print(&quot;\n=== Summary ===&quot;)</span><br><span class="line">    print(f&quot;Source: &#123;src&#125;&quot;)</span><br><span class="line">    print(f&quot;Output: &#123;dst&#125;&quot;)</span><br><span class="line">    print(f&quot;Limit : &#123;limit_mb&#125; MB&quot;)</span><br><span class="line">    print(f&quot;Total : &#123;total&#125; | OK: &#123;ok&#125; | FAIL: &#123;fail&#125;&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    ap = argparse.ArgumentParser(description=&quot;Compress images; PNG-&gt;WebP (alpha), others-&gt;JPEG. Orientation fixed.&quot;)</span><br><span class="line">    ap.add_argument(&quot;--src&quot;, type=str, required=True, help=&quot;Source folder (e.g., ./gallery)&quot;)</span><br><span class="line">    ap.add_argument(&quot;--dst&quot;, type=str, required=True, help=&quot;Output folder (e.g., ./gallery_5MB)&quot;)</span><br><span class="line">    ap.add_argument(&quot;--limit&quot;, type=float, default=5.0, help=&quot;Max size per image in MB (default: 5)&quot;)</span><br><span class="line">    ap.add_argument(&quot;--min-side&quot;, type=int, default=800, help=&quot;Do not scale below this shorter side (default: 800px)&quot;)</span><br><span class="line">    ap.add_argument(&quot;--orientation&quot;, type=str, choices=[&quot;auto&quot;,&quot;force&quot;,&quot;strip&quot;], default=&quot;auto&quot;,</span><br><span class="line">                    help=&quot;Orientation fix strategy: auto (default), force (always rotate by EXIF), strip (no rotate, set Orientation=1)&quot;)</span><br><span class="line">    args = ap.parse_args()</span><br><span class="line"></span><br><span class="line">    src = Path(args.src).resolve()</span><br><span class="line">    dst = Path(args.dst).resolve()</span><br><span class="line"></span><br><span class="line">    if not src.exists():</span><br><span class="line">        print(f&quot;Source folder not found: &#123;src&#125;&quot;)</span><br><span class="line">        sys.exit(1)</span><br><span class="line">    dst.mkdir(parents=True, exist_ok=True)</span><br><span class="line"></span><br><span class="line">    walk_and_compress(src, dst, args.limit, args.min_side, args.orientation)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行命令是前几行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># python compress_gallery.py --src .\gallery --dst .\gallery_5MB</span><br><span class="line"># python compress_gallery.py --src .\gallery --dst .\gallery_5MB --limit 5</span><br><span class="line"># python compress_gallery.py --src .\gallery --dst .\gallery_10MB --limit 10</span><br></pre></td></tr></table></figure><blockquote><p>这里的 5MB&#x2F;10MB 是最后需要限制的照片大小，如果想替换原相册的话就把后面的.\gallery_5MB或者.\gallery_10MB换成源目录.\gallery</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo配置相册页面&quot;&gt;&lt;a href=&quot;#hexo配置相册页面&quot; class=&quot;headerlink&quot; title=&quot;hexo配置相册页面&quot;&gt;&lt;/a&gt;hexo配置相册页面&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;相册演示地址:&lt;a href=&quot;https://w</summary>
      
    
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX 如何用 .bib 插入参考文献：从入门到入土（含完整示例）</title>
    <link href="https://wenjiew-astro.github.io/2025/08/31/LaTeX%20%E5%A6%82%E4%BD%95%E7%94%A8%20.bib%20%E6%8F%92%E5%85%A5%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%EF%BC%9A%E4%BB%8E%200%20%E5%88%B0%E5%8F%91%E5%B8%83%EF%BC%88%E5%90%AB%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B%EF%BC%89/"/>
    <id>https://wenjiew-astro.github.io/2025/08/31/LaTeX%20%E5%A6%82%E4%BD%95%E7%94%A8%20.bib%20%E6%8F%92%E5%85%A5%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%EF%BC%9A%E4%BB%8E%200%20%E5%88%B0%E5%8F%91%E5%B8%83%EF%BC%88%E5%90%AB%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B%EF%BC%89/</id>
    <published>2025-08-31T07:00:00.000Z</published>
    <updated>2025-09-01T01:15:22.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LaTeX-如何用-bib-插入参考文献：从入门到入土（含完整示例）"><a href="#LaTeX-如何用-bib-插入参考文献：从入门到入土（含完整示例）" class="headerlink" title="LaTeX 如何用 .bib 插入参考文献：从入门到入土（含完整示例）"></a>LaTeX 如何用 .bib 插入参考文献：从入门到入土（含完整示例）</h1><h2 id="1-基本概念速览"><a href="#1-基本概念速览" class="headerlink" title="1. 基本概念速览"></a>1. 基本概念速览</h2><ul><li><strong><code>.bib</code> 文件</strong>：参考文献数据库（纯文本），由一条条 <code>@article&#123;...&#125;</code>、<code>@book&#123;...&#125;</code> 等构成。</li><li><strong>引用命令</strong>：在正文中用 <code>\cite&#123;键&#125;</code>、<code>\citep&#123;键&#125;</code>、<code>\citet&#123;键&#125;</code> 等调用。</li><li><strong>样式</strong>：决定文末参考文献列表的格式（作者名、期刊名、年份等的排版）。</li><li><strong>编译链</strong>：<ul><li>BibTeX 路线：<code>pdflatex → bibtex → pdflatex → pdflatex</code></li><li>biblatex 路线：<code>pdflatex → biber → pdflatex → pdflatex</code></li></ul></li></ul><hr><h2 id="2-路线-A：BibTeX（经典稳定，投稿友好）"><a href="#2-路线-A：BibTeX（经典稳定，投稿友好）" class="headerlink" title="2. 路线 A：BibTeX（经典稳定，投稿友好）"></a>2. 路线 A：BibTeX（经典稳定，投稿友好）</h2><h3 id="2-1-目录与文件结构"><a href="#2-1-目录与文件结构" class="headerlink" title="2.1 目录与文件结构"></a>2.1 目录与文件结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project/</span><br><span class="line">├─ main.tex        % 主文档</span><br><span class="line">├─ refs.bib        % 你的文献库</span><br><span class="line">└─ aasjournal.bst  %（示例）期刊样式文件；也可用 natbib + plainnat 等</span><br></pre></td></tr></table></figure><blockquote><p>注：很多期刊会提供 <code>.bst</code>（样式）与 <code>.cls</code>（文档类），放在同目录或 TEX 路径可见处即可。</p></blockquote><h3 id="2-2-bib-文件示例（refs-bib）"><a href="#2-2-bib-文件示例（refs-bib）" class="headerlink" title="2.2 .bib 文件示例（refs.bib）"></a>2.2 <code>.bib</code> 文件示例（refs.bib）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@article&#123;Willott1999,</span><br><span class="line">  author       = &#123;Willott, C. J. and others&#125;,</span><br><span class="line">  title        = &#123;The radio luminosity function...&#125;,</span><br><span class="line">  journal      = &#123;MNRAS&#125;,</span><br><span class="line">  year         = &#123;1999&#125;,</span><br><span class="line">  volume       = &#123;309&#125;,</span><br><span class="line">  pages        = &#123;1017--1033&#125;,</span><br><span class="line">  doi          = &#123;10.1046/j.1365-8711.1999.02900.x&#125;,</span><br><span class="line">  url          = &#123;https://doi.org/10.1046/j.1365-8711.1999.02900.x&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@book&#123;Lamport1994,</span><br><span class="line">  author       = &#123;Lamport, Leslie&#125;,</span><br><span class="line">  title        = &#123;LaTeX: A Document Preparation System&#125;,</span><br><span class="line">  publisher    = &#123;Addison-Wesley&#125;,</span><br><span class="line">  year         = &#123;1994&#125;,</span><br><span class="line">  edition      = &#123;2&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>技巧：从 Google Scholar、ADS、Zotero、Mendeley 可直接导出 BibTeX。导入时注意清理字段（如多余的 html 标记）。</p></blockquote><h3 id="2-3-natbib-BibTeX-最小示例（main-tex）"><a href="#2-3-natbib-BibTeX-最小示例（main-tex）" class="headerlink" title="2.3 natbib + BibTeX 最小示例（main.tex）"></a>2.3 <code>natbib</code> + BibTeX 最小示例（main.tex）</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[11pt]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125; <span class="comment">% 现代发行版可省略</span></span><br><span class="line"><span class="keyword">\usepackage</span>[T1]&#123;fontenc&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;lmodern&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;natbib&#125;</span><br><span class="line"><span class="keyword">\bibliographystyle</span>&#123;plainnat&#125; <span class="comment">% 也可换成期刊给的 .bst，如 aasjournal</span></span><br><span class="line"><span class="keyword">\usepackage</span>[colorlinks=true,linkcolor=blue,citecolor=blue]&#123;hyperref&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;BibTeX 入门示例&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Your Name&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">正文中可以这样引用：<span class="keyword">\citet</span>&#123;Willott1999&#125; 指出……；</span><br><span class="line">或括号引用：星系射电功率与环境有关（<span class="keyword">\citealp</span>&#123;Willott1999&#125;）。</span><br><span class="line">再引一本书 <span class="keyword">\citep</span>&#123;Lamport1994&#125;。</span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成参考文献列表</span></span><br><span class="line"><span class="keyword">\bibliography</span>&#123;refs&#125; <span class="comment">% 对应 refs.bib</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-常用-natbib-引用命令"><a href="#2-4-常用-natbib-引用命令" class="headerlink" title="2.4 常用 natbib 引用命令"></a>2.4 常用 <code>natbib</code> 引用命令</h3><ul><li><code>\citet&#123;键&#125;</code>：作者名在句中（Author (Year)）</li><li><code>\citep&#123;键&#125;</code>：括号引用（(Author, Year)）</li><li><code>\citealp&#123;键&#125;</code>：无括号外壳的引用（Author, Year）</li><li><code>\citeyear&#123;键&#125;</code>：只年份</li><li><code>\citeauthor&#123;键&#125;</code>：只作者</li></ul><blockquote><p>选择不同的 <code>\bibliographystyle&#123;...&#125;</code>（如 <code>plainnat</code>、<code>unsrtnat</code>、<code>apalike</code>、期刊 <code>.bst</code>）会改变最终格式。</p></blockquote><h3 id="2-5-编译步骤（本地-TeX-Live-MiKTeX）"><a href="#2-5-编译步骤（本地-TeX-Live-MiKTeX）" class="headerlink" title="2.5 编译步骤（本地 TeX Live&#x2F;MiKTeX）"></a>2.5 编译步骤（本地 TeX Live&#x2F;MiKTeX）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pdflatex main</span><br><span class="line">bibtex main</span><br><span class="line">pdflatex main</span><br><span class="line">pdflatex main</span><br></pre></td></tr></table></figure><blockquote><p>Overleaf：菜单选择 <strong>Compiler</strong> 为 pdfLaTeX，点击 Recompile；首次需要让 Overleaf 触发 <code>bibtex</code>，一般自动完成。</p></blockquote><hr><h2 id="3-路线-B：biblatex-biber（功能强、中文友好、Web-字段丰富）"><a href="#3-路线-B：biblatex-biber（功能强、中文友好、Web-字段丰富）" class="headerlink" title="3. 路线 B：biblatex + biber（功能强、中文友好、Web 字段丰富）"></a>3. 路线 B：biblatex + biber（功能强、中文友好、Web 字段丰富）</h2><h3 id="3-1-bib-文件可与上文相同（refs-bib）"><a href="#3-1-bib-文件可与上文相同（refs-bib）" class="headerlink" title="3.1 .bib 文件可与上文相同（refs.bib）"></a>3.1 <code>.bib</code> 文件可与上文相同（refs.bib）</h3><h3 id="3-2-最小示例（main-tex）"><a href="#3-2-最小示例（main-tex）" class="headerlink" title="3.2 最小示例（main.tex）"></a>3.2 最小示例（main.tex）</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[11pt]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[T1]&#123;fontenc&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;lmodern&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 关键：加载 biblatex，后端用 biber</span></span><br><span class="line"><span class="keyword">\usepackage</span>[backend=biber,style=authoryear,sorting=nyt,maxbibnames=99]&#123;biblatex&#125;</span><br><span class="line"><span class="keyword">\addbibresource</span>&#123;refs.bib&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>[colorlinks=true,linkcolor=blue,citecolor=blue]&#123;hyperref&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;biblatex + biber 入门示例&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Your Name&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">句中引用：<span class="keyword">\textcite</span>&#123;Willott1999&#125;；括号引用：<span class="keyword">\parencite</span>&#123;Lamport1994&#125;。</span><br><span class="line">也可以一次引用多篇 <span class="keyword">\parencite</span>&#123;Willott1999,Lamport1994&#125;。</span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成参考文献列表</span></span><br><span class="line"><span class="keyword">\printbibliography</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-常用-biblatex-引用命令"><a href="#3-3-常用-biblatex-引用命令" class="headerlink" title="3.3 常用 biblatex 引用命令"></a>3.3 常用 <code>biblatex</code> 引用命令</h3><ul><li><code>\parencite&#123;键&#125;</code>：括号引用</li><li><code>\textcite&#123;键&#125;</code>：作者名融入正文</li><li><code>\footcite&#123;键&#125;</code>：脚注引用</li><li><code>\citeauthor&#123;键&#125;</code>、<code>\citeyear&#123;键&#125;</code> 同理可用</li></ul><h3 id="3-4-编译步骤"><a href="#3-4-编译步骤" class="headerlink" title="3.4 编译步骤"></a>3.4 编译步骤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pdflatex main</span><br><span class="line">biber main</span><br><span class="line">pdflatex main</span><br><span class="line">pdflatex main</span><br></pre></td></tr></table></figure><blockquote><p>Overleaf：菜单设置 <strong>Biber</strong> 为后端（Project → Settings → Compiler：pdfLaTeX；Biber enabled）。首次编译后 Overleaf 会自动运行 biber。</p></blockquote><hr><h2 id="4-选择哪条路线？"><a href="#4-选择哪条路线？" class="headerlink" title="4. 选择哪条路线？"></a>4. 选择哪条路线？</h2><ul><li><strong>投稿&#x2F;跟随期刊模版</strong>：通常用 <strong>BibTeX</strong> + 期刊 <code>.bst</code>；很多天文、物理期刊（AAS、MNRAS、A&amp;A）传统上就是这个。</li><li><strong>个人论文&#x2F;讲义&#x2F;中文环境更友好</strong>：推荐 <strong>biblatex + biber</strong>（可玩性强，字段更全，分组&#x2F;过滤更灵活）。</li><li><strong>已有大量老项目</strong>：继续用 BibTeX 也很好，稳定可靠。</li></ul><hr><h2 id="5-处理中文与编码"><a href="#5-处理中文与编码" class="headerlink" title="5. 处理中文与编码"></a>5. 处理中文与编码</h2><ul><li>现代 TeX Live 下，建议用 <code>xelatex</code> 或 <code>lualatex</code> 编译，并配合 <code>biblatex + biber</code>：</li></ul><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;fontspec&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[backend=biber,style=authoryear]&#123;biblatex&#125;</span><br><span class="line"><span class="keyword">\addbibresource</span>&#123;refs.bib&#125;</span><br><span class="line"><span class="keyword">\setmainfont</span>&#123;Times New Roman&#125; <span class="comment">% 或任意系统字体</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">中文测试：<span class="keyword">\textcite</span>&#123;Lamport1994&#125;。</span><br><span class="line"><span class="keyword">\printbibliography</span></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><ul><li>BibTeX 处理中文较麻烦，需要 <code>gbt7714</code> 等样式或将中文转拼音排序；若需国标格式，可用 <code>\usepackage[backend=biber,style=gb7714-2015]&#123;biblatex&#125;</code>（需安装 <code>biblatex-gb7714-2015</code> 套件）。</li></ul><hr><h2 id="6-常见条目类型与字段（速查）"><a href="#6-常见条目类型与字段（速查）" class="headerlink" title="6. 常见条目类型与字段（速查）"></a>6. 常见条目类型与字段（速查）</h2><ul><li><code>@article</code>：<code>author</code>, <code>title</code>, <code>journal</code>, <code>year</code>, <code>volume</code>, <code>number</code>, <code>pages</code>, <code>doi</code>, <code>url</code></li><li><code>@book</code>：<code>author/editor</code>, <code>title</code>, <code>publisher</code>, <code>year</code>, <code>edition</code></li><li><code>@inproceedings</code>：<code>author</code>, <code>title</code>, <code>booktitle</code>, <code>year</code>, <code>pages</code></li><li><code>@misc</code>：万金油；可放 <code>howpublished</code>, <code>note</code>, <code>url</code>, <code>doi</code>, <code>eprint</code>（arXiv）</li><li><code>@phdthesis</code> &#x2F; <code>@mastersthesis</code>：<code>author</code>, <code>title</code>, <code>school</code>, <code>year</code></li></ul><blockquote><p><strong>arXiv</strong>：可用 <code>eprint=&#123;arXiv:XXXX.XXXXX&#125;</code>, <code>archivePrefix=&#123;arXiv&#125;</code>, <code>primaryClass=&#123;astro-ph.GA&#125;</code> 等字段（biblatex 对 eprint 支持更好）。</p></blockquote><hr><h2 id="7-批量管理文献的实用建议"><a href="#7-批量管理文献的实用建议" class="headerlink" title="7. 批量管理文献的实用建议"></a>7. 批量管理文献的实用建议</h2><ul><li><strong>Zotero &#x2F; Mendeley</strong> 管库 → 导出 <code>.bib</code> 到项目目录。</li><li>给文献<strong>稳定的 citation key</strong>（如 <code>AuthorYearTitleKey</code>），避免与同名同年冲突（必要时加 <code>a,b,c</code>）。</li><li>定期清理 <code>.bib</code>：去掉无用字段（<code>abstract</code>、<code>file</code>、<code>urldate</code> 等，按需）。</li></ul><hr><h2 id="8-常见报错与排查"><a href="#8-常见报错与排查" class="headerlink" title="8. 常见报错与排查"></a>8. 常见报错与排查</h2><ol><li><strong>“Citation <code>xxx</code> undefined”</strong><ul><li>键不存在&#x2F;拼写错误；或忘记在 <code>.tex</code> 中 <code>\bibliography&#123;refs&#125;</code> &#x2F; <code>\addbibresource&#123;refs.bib&#125;</code>。</li><li>没有按正确顺序多次编译（见第 2.5&#x2F;3.4 步骤）。</li></ul></li><li><strong>参考文献不显示&#x2F;老版本</strong><ul><li>忘了运行 <code>bibtex</code>&#x2F;<code>biber</code>；或 <code>.aux/.bbl/.bcf</code> 等中间文件残留导致。</li><li>解决：删中间文件重新编译，或按顺序完整跑一遍。</li></ul></li><li><strong><code>biber</code> not found &#x2F; biblatex 报错</strong><ul><li>本地没装 <code>biber</code> 或 PATH 未配置；Overleaf 需在设置里启用 biber。</li></ul></li><li><strong>中文乱码&#x2F;问号</strong><ul><li>用 <code>xelatex</code>&#x2F;<code>lualatex</code> + <code>biblatex + biber</code>；或检查 <code>.bib</code> 的 UTF-8 编码。</li></ul></li><li><strong>样式不合期刊要求</strong><ul><li>使用期刊提供的 <code>.bst</code>（BibTeX）或官方文档推荐的 <code>biblatex</code> 样式。</li><li>某些期刊仅接受 BibTeX 格式的 <code>.bbl</code>，按其要求生成即可。</li></ul></li></ol><hr><h2 id="9-进阶：同一文献多次引用、附加页码、前后缀"><a href="#9-进阶：同一文献多次引用、附加页码、前后缀" class="headerlink" title="9. 进阶：同一文献多次引用、附加页码、前后缀"></a>9. 进阶：同一文献多次引用、附加页码、前后缀</h2><ul><li><strong>natbib</strong>：<ul><li><code>\citep[见][p.~12]&#123;Willott1999&#125;</code> → (见 Willott et al., 1999, p. 12)</li><li><code>\citep[例如][]&#123;Willott1999&#125;</code>、<code>\citet[第2节]&#123;Willott1999&#125;</code></li></ul></li><li><strong>biblatex</strong>：<ul><li><code>\parencite[见][12]&#123;Willott1999&#125;</code></li><li><code>\parencite[例如][]&#123;Willott1999&#125;</code></li><li><code>\textcite[§2]&#123;Willott1999&#125;</code></li></ul></li></ul><hr><h2 id="10-在博客中展示"><a href="#10-在博客中展示" class="headerlink" title="10. 在博客中展示"></a>10. 在博客中展示</h2><ul><li>用 Markdown 代码块粘贴 <code>.tex</code>、<code>.bib</code> 示例（与本文相同做法）。</li><li>若博客支持渲染公式（KaTeX&#x2F;MathJax），依然建议给出 <strong>可复制的源码</strong>，方便读者本地测试。</li><li>可附一张编译流程图或命令行片段（见上文编译命令）。</li></ul><hr><h2 id="11-完整可运行示例（两套各给一份）"><a href="#11-完整可运行示例（两套各给一份）" class="headerlink" title="11. 完整可运行示例（两套各给一份）"></a>11. 完整可运行示例（两套各给一份）</h2><h3 id="11-1-BibTeX-natbib-版"><a href="#11-1-BibTeX-natbib-版" class="headerlink" title="11.1 BibTeX + natbib 版"></a>11.1 BibTeX + natbib 版</h3><p><strong>main.tex</strong></p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[11pt]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[T1]&#123;fontenc&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;lmodern&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;natbib&#125;</span><br><span class="line"><span class="keyword">\bibliographystyle</span>&#123;plainnat&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[colorlinks=true,linkcolor=blue,citecolor=blue]&#123;hyperref&#125;</span><br><span class="line"><span class="keyword">\title</span>&#123;BibTeX + natbib 示例&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Your Name&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">如 <span class="keyword">\citet</span>&#123;Willott1999&#125; 所示，相关关系……（<span class="keyword">\citealp</span>&#123;Lamport1994&#125;）。</span><br><span class="line">多条同时引用：<span class="keyword">\citep</span>&#123;Willott1999,Lamport1994&#125;。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\bibliography</span>&#123;refs&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><p><strong>refs.bib</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@article&#123;Willott1999,</span><br><span class="line">  author  = &#123;Willott, C. J. and Rawlings, S. and Blundell, K. M. and Lacy, M.&#125;,</span><br><span class="line">  title   = &#123;The emission line-radio correlation...&#125;,</span><br><span class="line">  journal = &#123;MNRAS&#125;,</span><br><span class="line">  year    = &#123;1999&#125;,</span><br><span class="line">  volume  = &#123;309&#125;,</span><br><span class="line">  pages   = &#123;1017--1033&#125;,</span><br><span class="line">  doi     = &#123;10.1046/j.1365-8711.1999.02900.x&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@book&#123;Lamport1994,</span><br><span class="line">  author    = &#123;Lamport, Leslie&#125;,</span><br><span class="line">  title     = &#123;LaTeX: A Document Preparation System&#125;,</span><br><span class="line">  publisher = &#123;Addison-Wesley&#125;,</span><br><span class="line">  year      = &#123;1994&#125;,</span><br><span class="line">  edition   = &#123;2&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pdflatex main</span><br><span class="line">bibtex main</span><br><span class="line">pdflatex main</span><br><span class="line">pdflatex main</span><br></pre></td></tr></table></figure><hr><h3 id="11-2-biblatex-biber-版"><a href="#11-2-biblatex-biber-版" class="headerlink" title="11.2 biblatex + biber 版"></a>11.2 biblatex + biber 版</h3><p><strong>main.tex</strong></p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[11pt]&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;fontspec&#125; <span class="comment">% 若仅英文可不用</span></span><br><span class="line"><span class="keyword">\usepackage</span>[backend=biber,style=authoryear,sorting=nyt]&#123;biblatex&#125;</span><br><span class="line"><span class="keyword">\addbibresource</span>&#123;refs.bib&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[colorlinks=true,linkcolor=blue,citecolor=blue]&#123;hyperref&#125;</span><br><span class="line"><span class="keyword">\title</span>&#123;biblatex + biber 示例&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Your Name&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">句中：<span class="keyword">\textcite</span>&#123;Willott1999&#125;；括号：<span class="keyword">\parencite</span>&#123;Lamport1994&#125;；</span><br><span class="line">多条：<span class="keyword">\parencite</span>&#123;Willott1999,Lamport1994&#125;。</span><br><span class="line">带页码：<span class="keyword">\parencite</span>[12]&#123;Lamport1994&#125;。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\printbibliography</span></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><p><strong>refs.bib</strong>（同上）</p><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pdflatex main</span><br><span class="line">biber main</span><br><span class="line">pdflatex main</span><br><span class="line">pdflatex main</span><br></pre></td></tr></table></figure><hr><h2 id="12-FAQ-快速解惑"><a href="#12-FAQ-快速解惑" class="headerlink" title="12. FAQ 快速解惑"></a>12. FAQ 快速解惑</h2><ul><li><p><strong>Q：期刊要求提供 <code>.bbl</code>，怎么弄？</strong><br>A：走 BibTeX 流程，编译后生成的 <code>main.bbl</code> 即可提交。biblatex 路线有时不被传统流程接受。</p></li><li><p><strong>Q：同一作者同一年多篇 <code>[2019a, 2019b]</code> 如何自动添加 a&#x2F;b？</strong><br>A：<code>natbib</code> 与 <code>biblatex</code> 都会自动区分；关键在于条目的 <code>year</code> 与作者相同，系统会追加字母。</p></li><li><p><strong>Q：如何显示 DOI&#x2F;URL？</strong><br>A：<code>biblatex</code> 默认更友好；BibTeX 需样式支持（如 <code>plainurl</code>、<code>apalike</code> 的改款、或期刊 <code>.bst</code>）。<br>在 <code>biblatex</code> 下，可 <code>\usepackage[doi=true,url=true]&#123;biblatex&#125;</code>（或样式本身已开启）。</p></li><li><p><strong>Q：我需要 GB&#x2F;T 7714 国标格式？</strong><br>A：推荐 <code>biblatex-gb7714-2015</code>：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[backend=biber,style=gb7714-2015]&#123;biblatex&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="13-一键排错清单（贴墙用）"><a href="#13-一键排错清单（贴墙用）" class="headerlink" title="13. 一键排错清单（贴墙用）"></a>13. 一键排错清单（贴墙用）</h2><ol><li>检查 <strong>citation key</strong> 是否一致（<code>\cite&#123;键&#125;</code> 与 <code>.bib</code> 中的 <code>@...&#123;键, ...&#125;</code>）。</li><li>跑对 <strong>编译顺序</strong>（BibTeX vs biber）。</li><li>删中间文件（<code>.aux .bbl .bcf .blg .run.xml</code> 等）后重编。</li><li>确认 Overleaf&#x2F;本地 <strong>后端设置</strong>（biber 是否开启）。</li><li>确认 <strong>编码</strong> 为 UTF-8；中文建议用 <code>xelatex</code> + <code>biblatex</code>。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LaTeX-如何用-bib-插入参考文献：从入门到入土（含完整示例）&quot;&gt;&lt;a href=&quot;#LaTeX-如何用-bib-插入参考文献：从入门到入土（含完整示例）&quot; class=&quot;headerlink&quot; title=&quot;LaTeX 如何用 .bib 插入参考文献：从入</summary>
      
    
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Latex" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/Latex/"/>
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Latex" scheme="https://wenjiew-astro.github.io/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>Vercel 托管 Github page</title>
    <link href="https://wenjiew-astro.github.io/2025/08/28/Vercel%20%E6%89%98%E7%AE%A1%20Github%20page/"/>
    <id>https://wenjiew-astro.github.io/2025/08/28/Vercel%20%E6%89%98%E7%AE%A1%20Github%20page/</id>
    <published>2025-08-27T16:00:00.000Z</published>
    <updated>2025-08-28T07:39:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vercel 是一个为开发者提供工具、工作流和基础设施的平台，可以让你更快地构建和部署你的 Web 应用，而无需额外的配置。</p></blockquote><p>vercel官网：<a href="https://link.juejin.cn/?target=https://vercel.com/">vercel.com&#x2F;</a>，可以直接使用github账号登录。</p><h1 id="Vercel-托管-Github-page"><a href="#Vercel-托管-Github-page" class="headerlink" title="Vercel 托管 Github page"></a>Vercel 托管 Github page</h1><h2 id="Vercel-直接托管“纯静态仓库”（不构建，最省事）"><a href="#Vercel-直接托管“纯静态仓库”（不构建，最省事）" class="headerlink" title="Vercel 直接托管“纯静态仓库”（不构建，最省事）"></a>Vercel 直接托管“纯静态仓库”（不构建，最省事）</h2><p>你的GitHub仓库里只有已经生成好的静态文件，就让 Vercel  <strong>不执行构建</strong> ，只把指定目录当站点根。</p><ol><li>在 Vercel → <strong>Add New → Project → Import Git Repository</strong> 选你的仓库。</li><li>在 “Configure Project” 里：<ul><li><strong>Framework Preset</strong> ：<code>Other</code></li><li><strong>Install Command</strong> ：留空</li><li><strong>Build Command</strong> ：留空（很关键，表示不构建）</li><li><strong>Output Directory</strong> ：</li><li>如果  <strong>静态文件在仓库根</strong> （<code>index.html</code> 在根）：填 <code>.</code></li><li>如果  <strong>静态文件在仓库的 <code>public/</code> 子目录</strong> ：填 <code>public</code></li></ul></li><li>点 <strong>Deploy</strong> 就完成了。以后你只要继续往这个仓库推送静态文件，Vercel 会自动发布。</li></ol><blockquote><p>你现在 GitHub Pages 是个人主页（根路径 <code>/</code>），如果你的仓库根就是这些文件，<strong>Output 直接填 <code>.</code></strong> 就行。</p></blockquote><h2 id="GitHub-Actions：检测到你推“静态仓库”就自动发-Vercel"><a href="#GitHub-Actions：检测到你推“静态仓库”就自动发-Vercel" class="headerlink" title="GitHub Actions：检测到你推“静态仓库”就自动发 Vercel"></a>GitHub Actions：检测到你推“静态仓库”就自动发 Vercel</h2><p>如果你仍把<strong>静态文件推到 GitHub</strong>，可以加个极简工作流，让它自动把仓库内容部署到 Vercel（不构建）。</p><p>在仓库中新增 <code>.github/workflows/deploy-vercel.yml</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: Deploy static to Vercel (no build)</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ main ]</span><br><span class="line">  workflow_dispatch:</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">      - name: Install Vercel CLI</span><br><span class="line">        run: npm i -g vercel@latest</span><br><span class="line"></span><br><span class="line">      - name: Pull Vercel project settings</span><br><span class="line">        run: vercel pull --yes --environment=production --token $&#123;&#123; secrets.VERCEL_TOKEN &#125;&#125;</span><br><span class="line">        env:</span><br><span class="line">          VERCEL_ORG_ID: $&#123;&#123; secrets.VERCEL_ORG_ID &#125;&#125;</span><br><span class="line">          VERCEL_PROJECT_ID: $&#123;&#123; secrets.VERCEL_PROJECT_ID &#125;&#125;</span><br><span class="line"></span><br><span class="line">      # 如果你的静态文件在仓库根，改成 &quot;vercel deploy .&quot;</span><br><span class="line">      - name: Deploy current repo as static site</span><br><span class="line">        run: vercel deploy public --prod --yes --token $&#123;&#123; secrets.VERCEL_TOKEN &#125;&#125;</span><br><span class="line">        env:</span><br><span class="line">          VERCEL_ORG_ID: $&#123;&#123; secrets.VERCEL_ORG_ID &#125;&#125;</span><br><span class="line">          VERCEL_PROJECT_ID: $&#123;&#123; secrets.VERCEL_PROJECT_ID &#125;&#125;</span><br></pre></td></tr></table></figure><p>在 GitHub → Settings → Secrets and variables → Actions 新增 3 个机密：</p><ul><li><code>VERCEL_TOKEN</code>（Vercel 账户里创建的 access token）</li><li><code>VERCEL_ORG_ID</code>、<code>VERCEL_PROJECT_ID</code>（在对应项目的 Settings 里能看到）</li></ul><blockquote><p>如果你的仓库根就是静态站点，把 <code>vercel deploy public</code> 改为 <code>vercel deploy .</code>。</p></blockquote><hr><h2 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h2><ul><li><p><strong>同时保留 GitHub Pages</strong>：完全没冲突。Vercel 会有 <code>xxx.vercel.app</code> 域名；你可以在导航里放“镜像”链接。</p></li><li><p><strong>缓存优化（可选）</strong>：根目录放一个 <code>vercel.json</code> 给静态资源长缓存（HTML 不缓存），提升访问体验：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;version&quot;: 2, &quot;cleanUrls&quot;: true,</span><br><span class="line">  &quot;headers&quot;: [</span><br><span class="line">    &#123; &quot;source&quot;: &quot;/(.*)\\.(js|css|png|jpg|jpeg|webp|svg|gif)&quot;,</span><br><span class="line">      &quot;headers&quot;: [&#123; &quot;key&quot;: &quot;Cache-Control&quot;, &quot;value&quot;: &quot;public, max-age=31536000, immutable&quot;&#125;] &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果找不到<strong>VERCEL_ORG_ID</strong>，请看下面的方案</p></blockquote><h3 id="在-Vercel-面板里找到-ORG（账号-团队）ID"><a href="#在-Vercel-面板里找到-ORG（账号-团队）ID" class="headerlink" title="在 Vercel 面板里找到 ORG（账号&#x2F;团队）ID"></a>在 Vercel 面板里找到 ORG（账号&#x2F;团队）ID</h3><p><strong>如果是个人账号：</strong></p><ol><li>右上角头像 → <strong>Account Settings</strong>（账户设置）。</li><li><strong>General &#x2F; Account</strong> 页面里能看到 <strong>User ID</strong>（有时也显示为 Team&#x2F;Org ID），形如 <code>team_xxxxx</code> 或 <code>user_xxxxx</code>。这就是 <code>VERCEL_ORG_ID</code>。</li></ol><p><strong>如果是在团队下：</strong></p><ol><li>左上角团队切换（或头像菜单）进入 <strong>Team Settings</strong>。</li><li><strong>General</strong> 页面里能看到 <strong>Team ID</strong>（形如 <code>team_xxxxx</code>）。它就是 <code>VERCEL_ORG_ID</code>。</li></ol><p>把这个 ID 连同你已有的 <code>VERCEL_PROJECT_ID</code> 和 <code>VERCEL_TOKEN</code> 一起放进 GitHub 仓库的 <strong>Settings → Secrets and variables → Actions</strong> 即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Vercel 是一个为开发者提供工具、工作流和基础设施的平台，可以让你更快地构建和部署你的 Web 应用，而无需额外的配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vercel官网：&lt;a href=&quot;https://link.juejin.cn</summary>
      
    
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://wenjiew-astro.github.io/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
    <category term="教程" scheme="https://wenjiew-astro.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Github主页" scheme="https://wenjiew-astro.github.io/tags/Github%E4%B8%BB%E9%A1%B5/"/>
    
  </entry>
  
</feed>
